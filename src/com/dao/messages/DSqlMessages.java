package com.dao.messages;


import com.dao.admin.doc.DSqlAdminDoc;

import com.inf.IRoles;

public class DSqlMessages extends DSqlAdminDoc {

   
    
    public final String SQL_DEPARTMENT_SELECT_ALL_DEPARTMENT  =  SELECT + FIELDS("A",new String[]{DEPARTMENTS_DEPARTMENT_ID ,DEPARTMENTS_NAME,DEPARTMENTS_PARENT_ID }) + COMMA + 
                                                            FIELDS("B",new String[]{DEPARTMENTS_DEPARTMENT_ID ,DEPARTMENTS_NAME,DEPARTMENTS_PARENT_ID }) + 
                                                            FROM + TABLE_DEPARTMENTS + " A" + LEFT_OUTER_JOIN + TABLE_DEPARTMENTS + " B" + 
                                                            ON + "B." + DEPARTMENTS_PARENT_ID + EQUAL + "A." + DEPARTMENTS_DEPARTMENT_ID ;

                                                            
    public final String SQL_DEPARTMENT_SELECT_ALL_DEPARTMENT_IN_RULE   =  SELECT + DEPARTMENTS_DEPARTMENT_ID + COMMA + DEPARTMENTS_NAME + COMMA + DEPARTMENTS_PARENT_ID + FROM + TABLE_DEPARTMENTS ;
    
    public final String SQL_GROUP_SELECT_ALL_GROUP  =  SELECT + FIELDS("A",new String[]{GROUPS_GROUP_ID ,GROUPS_NAME,GROUPS_PARENT_ID }) + COMMA + 
                                                            FIELDS("B",new String[]{GROUPS_GROUP_ID ,GROUPS_NAME,GROUPS_PARENT_ID }) + 
                                                            FROM + TABLE_GROUPS + " A" + LEFT_OUTER_JOIN + TABLE_GROUPS + " B" + 
                                                            ON + "B." + GROUPS_PARENT_ID + EQUAL + "A." + GROUPS_GROUP_ID ;
    
    public final String SQL_GROUP_SELECT_ALL_GROUP_IN_RULE   =  SELECT + GROUPS_GROUP_ID + COMMA + GROUPS_NAME + COMMA + GROUPS_PARENT_ID + FROM + TABLE_GROUPS ;
    
    public final String SQL_GROUP_SELECT_ADD_WHERE_IN_DOC_RULE = SELECT + DISTINCT + OPEN + TABLE_USERS + STOP + USERS_GROUP_ID + CLOSE + FROM + TABLE_USERS + WHERE +  TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + TABLE_DOC_OFFICERS + STOP + DOC_OFFICERS_USER_ID + FROM + TABLE_DOC_OFFICERS + LEFT_JOIN + TABLE_DOC_RULES + ON + TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_OFFICERS + STOP + DOC_OFFICERS_RULE_ID + LEFT_JOIN + TABLE_DOC_BOSS + ON + TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_BOSS + STOP + DOC_BOSS_RULE_ID + WHERE + TABLE_DOC_BOSS + STOP + DOC_BOSS_USER_ID + EQUAL + QUESTION + AND + TABLE_DOC_RULES + STOP + DOC_RULES_ACTIVE + DIFF + 0  + AND + TABLE_DOC_RULES + STOP + DOC_RULES_WORKFLOW_ID + EQUAL + QUESTION + CLOSE;
    public final String SQL_GROUP_ADD_WHERE_ID_BY_RULE = WHERE + GROUPS_GROUP_ID + IN + OPEN + "#" + CLOSE;   
      
    public final String SQL_DEPARTMENT_SELECT_ADD_WHERE_IN_DOC_RULE = SELECT + DISTINCT + OPEN + TABLE_USERS + STOP + USERS_DEPARTMENT_ID + CLOSE + FROM + TABLE_USERS + WHERE +  TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + TABLE_DOC_OFFICERS + STOP + DOC_OFFICERS_USER_ID + FROM + TABLE_DOC_OFFICERS + LEFT_JOIN + TABLE_DOC_RULES + ON + TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_OFFICERS + STOP + DOC_OFFICERS_RULE_ID + LEFT_JOIN + TABLE_DOC_BOSS + ON + TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_BOSS + STOP + DOC_BOSS_RULE_ID + WHERE + TABLE_DOC_BOSS + STOP + DOC_BOSS_USER_ID + EQUAL + QUESTION + AND + TABLE_DOC_RULES + STOP + DOC_RULES_ACTIVE + DIFF + 0  + AND + TABLE_DOC_RULES + STOP + DOC_RULES_WORKFLOW_ID + EQUAL + QUESTION + CLOSE;
    public final String SQL_DEPARTMENT_SELECT_ADD_WHERE_IN_DOC_RULE_PRIORITIES = SELECT + DISTINCT + OPEN + TABLE_USERS + STOP + USERS_DEPARTMENT_ID + CLOSE + FROM + TABLE_USERS + WHERE +  TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + TABLE_DOC_PRIORITIES + STOP + DOC_PRIORITIES_USER_ID + FROM + TABLE_DOC_PRIORITIES + LEFT_JOIN + TABLE_DOC_RULES + ON + TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_PRIORITIES + STOP + DOC_PRIORITIES_RULE_ID + LEFT_JOIN + TABLE_DOC_BOSS + ON + TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_BOSS + STOP + DOC_BOSS_RULE_ID + WHERE + TABLE_DOC_BOSS + STOP + DOC_BOSS_USER_ID + EQUAL + QUESTION + AND + TABLE_DOC_RULES + STOP + DOC_RULES_ACTIVE + DIFF + 0  + AND + TABLE_DOC_RULES + STOP + DOC_RULES_WORKFLOW_ID + EQUAL + QUESTION + CLOSE;
    public final String SQL_DEPARTMENT_SELECT_ADD_WHERE_IN_TASK_RULE = SELECT + DISTINCT + OPEN + TABLE_USERS + STOP + USERS_DEPARTMENT_ID + CLOSE + FROM + TABLE_USERS + WHERE +  TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + TABLE_TASK_ASSIGN_OFFICERS + STOP + TASK_ASSIGN_OFFICERS_USER_ID + FROM + TABLE_TASK_ASSIGN_OFFICERS + LEFT_JOIN + TABLE_TASK_ASSIGN_RULES + ON + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_RULE_ID + EQUAL + TABLE_TASK_ASSIGN_OFFICERS + STOP + TASK_ASSIGN_OFFICERS_RULE_ID + LEFT_JOIN + TABLE_TASK_ASSIGN_BOSS + ON + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_RULE_ID + EQUAL + TABLE_TASK_ASSIGN_BOSS + STOP + TASK_ASSIGN_BOSS_RULE_ID + WHERE + TABLE_TASK_ASSIGN_BOSS + STOP + TASK_ASSIGN_BOSS_USER_ID + EQUAL + QUESTION  + AND + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_ACTIVE  + DIFF + 0 + CLOSE;
   
    public final String SQL_DEPARTMENT_ADD_WHERE_ID = WHERE + "A." + DEPARTMENTS_DEPARTMENT_ID + IN + OPEN + "#" + CLOSE;   
    public final String SQL_DEPARTMENT_ADD_WHERE_ID_BY_RULE = WHERE + DEPARTMENTS_DEPARTMENT_ID + IN + OPEN + "#" + CLOSE;   
    
    public final String SQL_DEPARTMENT_SELECT_ALL_GROUP = SELECT + FIELDS("A",new String[]{GROUPS_GROUP_ID ,GROUPS_NAME,GROUPS_PARENT_ID}) + COMMA + 
                                                                        FIELDS("B",new String[]{GROUPS_GROUP_ID ,GROUPS_NAME,GROUPS_PARENT_ID }) + 
                                                               FROM + TABLE_GROUPS + " A" + LEFT_OUTER_JOIN + TABLE_GROUPS + " B" + 
                                                               ON + "B." + GROUPS_PARENT_ID + EQUAL + "A." + GROUPS_GROUP_ID +
                                                               ORDER_BY + "B." + GROUPS_PARENT_ID + COMMA +"B." + GROUPS_GROUP_ID;
    
    
    public final String SQL_USERS_NAME = SELECT + STAR + FROM + TABLE_USERS ;
    public final String SQL_USER_BY_DEPARTMENT_ID = SELECT + STAR + FROM + TABLE_USERS + WHERE + USERS_DEPARTMENT_ID + EQUAL + QUESTION + AND + USERS_ROLE + DIFF + 16777216;
    
    
   
    
    
    public final String SQL_DOC_RULE_RECV_ASSIGN_BY_USER = SELECT + TABLE_DOC_TRAILER_RECV + STOP + DOC_TRAILER_RECV_USERRECV_ID + FROM + TABLE_DOC_TRAILER_RECV + WHERE + DOC_TRAILER_RECV_DOC_ID + EQUAL + QUESTION ;
    
    public final String SQL_DOC_RULE_SEND_ASSIGN_BY_USER = SELECT + TABLE_DOC_TRAILER_SEND + STOP + DOC_TRAILER_SEND_USERRECV_ID + FROM + TABLE_DOC_TRAILER_SEND + WHERE + DOC_TRAILER_SEND_DOC_ID + EQUAL + QUESTION ;
    
    
    public final String SQL_DOC_RULE_JOIN_WHERE = SELECT + TABLE_DOC_OFFICERS + STOP + DOC_OFFICERS_USER_ID + FROM + TABLE_DOC_RULES + LEFT_JOIN + TABLE_DOC_OFFICERS + ON + TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_OFFICERS + STOP + DOC_OFFICERS_RULE_ID + LEFT_JOIN + TABLE_DOC_BOSS + ON + TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_BOSS  + STOP + DOC_BOSS_RULE_ID;
    public final String SQL_DOC_RULE_JOIN_WHERE_PRI = SELECT + TABLE_DOC_PRIORITIES + STOP + DOC_PRIORITIES_USER_ID + FROM + TABLE_DOC_RULES + LEFT_JOIN + TABLE_DOC_PRIORITIES + ON + TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_PRIORITIES + STOP + DOC_PRIORITIES_RULE_ID + LEFT_JOIN + TABLE_DOC_BOSS + ON + TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_BOSS + STOP + DOC_BOSS_RULE_ID ;
    public final String SQL_DOC_RULE_JOIN = AND  + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SQL_DOC_RULE_JOIN_WHERE + WHERE + TABLE_DOC_RULES + STOP + DOC_RULES_ACTIVE + DIFF + 0 + AND + TABLE_DOC_RULES + STOP + DOC_RULES_WORKFLOW_ID + EQUAL + QUESTION + AND + TABLE_DOC_BOSS + STOP + DOC_BOSS_USER_ID + EQUAL + QUESTION  + CLOSE + OR + OPEN + TABLE_USERS + STOP +  USERS_USER_ID + IN + OPEN + SQL_DOC_RULE_JOIN_WHERE_PRI  + WHERE + TABLE_DOC_RULES + STOP + DOC_RULES_ACTIVE + DIFF + 0 + AND + TABLE_DOC_RULES + STOP + DOC_RULES_WORKFLOW_ID + EQUAL + QUESTION + AND + TABLE_DOC_BOSS + STOP + DOC_BOSS_USER_ID + EQUAL + QUESTION   + CLOSE + AND + TABLE_USERS + STOP + USERS_DEPARTMENT_ID + EQUAL + QUESTION + CLOSE;
    
    public final String SQL_DOC_RULE_JOIN_SELECT_EMP =   AND + OPEN + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SQL_DOC_RULE_JOIN_WHERE + WHERE + TABLE_DOC_RULES + STOP + DOC_RULES_ACTIVE + DIFF + 0 + AND + TABLE_DOC_RULES + STOP + DOC_RULES_WORKFLOW_ID + EQUAL + QUESTION + AND + TABLE_DOC_BOSS + STOP + DOC_BOSS_USER_ID + EQUAL + QUESTION  + CLOSE + OR + OPEN + TABLE_USERS + STOP +  USERS_USER_ID + IN + OPEN + SQL_DOC_RULE_JOIN_WHERE_PRI  + WHERE + TABLE_DOC_RULES + STOP + DOC_RULES_ACTIVE + DIFF + 0 + AND + TABLE_DOC_RULES + STOP + DOC_RULES_WORKFLOW_ID + EQUAL + QUESTION + AND + TABLE_DOC_BOSS + STOP + DOC_BOSS_USER_ID + EQUAL + QUESTION   + CLOSE;
    
    public final String SQL_TASK_RULE_JOIN = AND + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + TABLE_TASK_ASSIGN_OFFICERS + STOP + TASK_ASSIGN_OFFICERS_USER_ID + FROM + TABLE_TASK_ASSIGN_OFFICERS + LEFT_JOIN + TABLE_TASK_ASSIGN_RULES + ON + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_RULE_ID + EQUAL + TABLE_TASK_ASSIGN_OFFICERS + STOP + TASK_ASSIGN_OFFICERS_RULE_ID + LEFT_JOIN + TABLE_TASK_ASSIGN_BOSS + ON + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_RULE_ID + EQUAL + TABLE_TASK_ASSIGN_BOSS + STOP + TASK_ASSIGN_BOSS_RULE_ID + WHERE + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_ACTIVE + DIFF + 0 + AND + TABLE_TASK_ASSIGN_BOSS + STOP + TASK_ASSIGN_BOSS_USER_ID + EQUAL + QUESTION + CLOSE ;
    
    
    


    
    public final String SQL_USER_BY_GROUP_ID = SELECT + STAR + FROM + TABLE_USERS + WHERE + USERS_GROUP_ID + EQUAL + QUESTION + AND + TABLE_USERS + STOP + USERS_USER_ID + DIFF + QUESTION;
    public final String SQL_USER_IN_USER_ID = SELECT + STAR + FROM + TABLE_USERS ;
    public final String SQL_USER_IN_REC_TO_PERSON = SELECT + STAR + FROM + TABLE_USERS + WHERE + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + RECIEVERS_TO_PERSON + FROM + TABLE_RECEIVERS + WHERE + RECIEVERS_MESSAGES_ID + EQUAL + QUESTION + CLOSE + AND + TABLE_USERS + STOP + USERS_USER_ID + DIFF + QUESTION;
    public final String SQL_USER_WHERE_DEPARTMENT = AND + TABLE_USERS + STOP + USERS_DEPARTMENT_ID + EQUAL + QUESTION;
    
    public final String SQL_SELECT_MESSAGES_BY_ID = SELECT + TABLE_MESSAGES + STOP + STAR + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + FROM + TABLE_MESSAGES + LEFT_JOIN + TABLE_USERS + ON + TABLE_MESSAGES + STOP + MESSAGES_CREATOR + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + WHERE + TABLE_MESSAGES + STOP + MESSAGES_ID + EQUAL + QUESTION ;
    public final String SQL_INSERT_FILE_MESSAGES = INSERT_INTO + TABLE_MESSAGE_FILES + FIELDS(FILE_MESSAGES_ALL_FIELDS, true) +  VALUES(FILE_MESSAGES_ALL_FIELDS.length);
    public final String SQL_INSERT_MESSAGES = INSERT_INTO + TABLE_MESSAGES + FIELDS(MESSAGES_ALL_FIELDS, true) +  VALUES(MESSAGES_ALL_FIELDS.length);
    public final String SQL_SELECT_MESSAGES_ID_TOP = SELECT + MAX(MESSAGES_ID) + FROM + TABLE_MESSAGES + WHERE + MESSAGES_CREATOR + EQUAL + QUESTION;
   
    public final String SQL_SELECT_ALL_MESSAGES = SELECT +  TABLE_MESSAGES + STOP + MESSAGES_ID + COMMA + TABLE_MESSAGES + STOP + MESSAGES_NAME + COMMA + TABLE_MESSAGES + STOP + MESSAGES_CREATOR + COMMA + TABLE_MESSAGES + STOP + MESSAGES_TIMECREATOR + COMMA + TABLE_MESSAGES + STOP + MESSAGES_FILES +  COMMA + TABLE_MESSAGES + STOP + MESSAGES_REMOVE + COMMA + TABLE_MESSAGES + STOP + MESSAGES_FULLTEXT + COMMA + TABLE_MESSAGES + STOP + MESSAGES_PATH_FILE + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + COMMA + TABLE_MESSAGES + STOP + MESSAGES_EMAIL + FROM + TABLE_MESSAGES +  LEFT_OUTER_JOIN + TABLE_USERS + ON + TABLE_MESSAGES + STOP + MESSAGES_CREATOR + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + WHERE + TRUE; 
    public final String SQL_SELECT_SEND_MESSAGES = SQL_SELECT_ALL_MESSAGES + AND + TABLE_MESSAGES + STOP + MESSAGES_REMOVE + EQUAL + 0 + AND + TABLE_MESSAGES + STOP + MESSAGES_CREATOR + EQUAL + QUESTION; 
    public final String SQL_SELECT_RECV_MESSAGES = SELECT +  TABLE_MESSAGES + STOP + MESSAGES_ID + COMMA + TABLE_MESSAGES + STOP + MESSAGES_NAME + COMMA + TABLE_MESSAGES + STOP + MESSAGES_CREATOR + COMMA + TABLE_MESSAGES + STOP + MESSAGES_TIMECREATOR + COMMA + TABLE_MESSAGES + STOP + MESSAGES_FILES +  COMMA + TABLE_MESSAGES + STOP + MESSAGES_REMOVE + COMMA + TABLE_MESSAGES + STOP + MESSAGES_FULLTEXT + COMMA + TABLE_MESSAGES + STOP + MESSAGES_PATH_FILE + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + COMMA + TABLE_RECEIVERS + STOP + RECIEVERS_READ + COMMA + TABLE_RECEIVERS + STOP + RECIEVERS_EMAIL + FROM + TABLE_MESSAGES +  LEFT_OUTER_JOIN + TABLE_USERS + ON + TABLE_MESSAGES + STOP + MESSAGES_CREATOR + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + LEFT_JOIN + TABLE_RECEIVERS + ON + TABLE_MESSAGES + STOP + MESSAGES_ID + EQUAL + TABLE_RECEIVERS + STOP + RECIEVERS_MESSAGES_ID + WHERE + TABLE_RECEIVERS + STOP + RECIEVERS_REMOVE + EQUAL + 0 + AND + TABLE_RECEIVERS + STOP + RECIEVERS_TO_PERSON + EQUAL + QUESTION; 
    public final String SQL_SELECT_DEL_MESSAGES = SELECT + DISTINCT + OPEN + TABLE_MESSAGES + STOP + MESSAGES_ID + CLOSE + COMMA + TABLE_MESSAGES + STOP + MESSAGES_NAME + COMMA + TABLE_MESSAGES + STOP + MESSAGES_CREATOR + COMMA + TABLE_MESSAGES + STOP + MESSAGES_TIMECREATOR + COMMA + TABLE_MESSAGES + STOP + MESSAGES_FILES +  COMMA + TABLE_MESSAGES + STOP + MESSAGES_REMOVE + COMMA + TABLE_MESSAGES + STOP + MESSAGES_FULLTEXT + COMMA + TABLE_MESSAGES + STOP + MESSAGES_PATH_FILE + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + COMMA + TABLE_MESSAGES + STOP + MESSAGES_EMAIL + FROM + TABLE_MESSAGES +  LEFT_OUTER_JOIN + TABLE_USERS + ON + TABLE_MESSAGES + STOP + MESSAGES_CREATOR + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + LEFT_JOIN + TABLE_RECEIVERS + ON + TABLE_MESSAGES + STOP + MESSAGES_ID + EQUAL + TABLE_RECEIVERS + STOP + RECIEVERS_MESSAGES_ID + WHERE + OPEN + OPEN + TABLE_RECEIVERS + STOP + RECIEVERS_REMOVE + EQUAL + PARAM_01 + AND +TABLE_RECEIVERS + STOP + RECIEVERS_TO_PERSON + EQUAL + QUESTION + CLOSE + OR + OPEN  +  TABLE_MESSAGES + STOP + MESSAGES_CREATOR + EQUAL + QUESTION + AND + TABLE_MESSAGES + STOP + MESSAGES_REMOVE + EQUAL + PARAM_01 + CLOSE + CLOSE;
    public final String SQL_SELECT_MESSAGES_WHERE_NAME = AND + OPEN + TABLE_MESSAGES + STOP + MESSAGES_NAME + LIKE + QUESTION; 
    public final String SQL_SELECT_MESSAGES_WHERE_FULLTEXT = OR + TABLE_MESSAGES + STOP + MESSAGES_FULLTEXT + LIKE + QUESTION + CLOSE; 
  
    public final String SQL_SELECT_INFOR_RECIEVER  = SELECT +  STAR + FROM + TABLE_RECEIVERS + WHERE + TABLE_RECEIVERS + STOP + RECIEVERS_MESSAGES_ID + EQUAL + QUESTION + AND  + TABLE_RECEIVERS + STOP + RECIEVERS_TO_PERSON + EQUAL + QUESTION;                                                 
                                                       
    public final String SQL_SELECT_ID_RECIEVER  = SELECT + DISTINCT + OPEN + TABLE_RECEIVERS + STOP + RECIEVERS_MESSAGES_ID + CLOSE + FROM + TABLE_RECEIVERS + WHERE + TRUE;                                                 
                                                   
     public final String SQL_SELECT_AMOUNT_MESSAGES = SELECT + COUNT(STAR) + FROM + TABLE_MESSAGES + WHERE + TRUE; 
     public final String SQL_SELECT_AMOUNT_MESSAGES_SEND = SELECT + COUNT + OPEN +  MESSAGES_ID + CLOSE + FROM + TABLE_MESSAGES + WHERE + MESSAGES_REMOVE + EQUAL + 0 + AND + MESSAGES_CREATOR + EQUAL + QUESTION ; 
     public final String SQL_SELECT_AMOUNT_MESSAGES_RECV = SELECT + TABLE_RECEIVERS + STOP + RECIEVERS_READ + COMMA + COUNT + OPEN + TABLE_MESSAGES + STOP + MESSAGES_ID + CLOSE + FROM + TABLE_MESSAGES + LEFT_JOIN + TABLE_RECEIVERS + ON + TABLE_MESSAGES + STOP + MESSAGES_ID + EQUAL + TABLE_RECEIVERS + STOP + RECIEVERS_MESSAGES_ID  + WHERE + TABLE_RECEIVERS + STOP + RECIEVERS_REMOVE + EQUAL + 0 + AND + RECIEVERS_TO_PERSON + EQUAL + QUESTION + GROUP_BY + TABLE_RECEIVERS + STOP + RECIEVERS_READ; 
    public final String SQL_SELECT_AMOUNT_MESSAGES_EMP_RECV =SELECT + USERS_USER_ID + COMMA + USERS_FULLNAME + FROM + TABLE_USERS + WHERE + USERS_USER_ID + IN + OPEN + SELECT + RECIEVERS_TO_PERSON + FROM + TABLE_RECEIVERS + WHERE + RECIEVERS_MESSAGES_ID + EQUAL + QUESTION + CLOSE;
     public final String SQL_SELECT_AMOUNT_MESSAGES_DEL = SELECT + COUNT + OPEN + TABLE_MESSAGES + STOP + MESSAGES_ID + CLOSE + FROM + TABLE_MESSAGES + LEFT_JOIN + TABLE_RECEIVERS + ON + TABLE_MESSAGES + STOP + MESSAGES_ID + EQUAL + TABLE_RECEIVERS + STOP + RECIEVERS_MESSAGES_ID  + WHERE + OPEN + TABLE_RECEIVERS + STOP + RECIEVERS_REMOVE + EQUAL + 1 + AND + RECIEVERS_TO_PERSON + EQUAL + QUESTION + CLOSE + OR + OPEN + TABLE_MESSAGES + STOP +MESSAGES_REMOVE + EQUAL + 1 + AND + MESSAGES_CREATOR + EQUAL + QUESTION + CLOSE; 

    public final String SQL_REV_ADD_WHERE_READ = AND + TABLE_RECEIVERS + STOP + RECIEVERS_READ + EQUAL + 0;  
    public final String SQL_SELECT_ALL_RECIEVER = SELECT + DISTINCT + OPEN + TABLE_MESSAGES + STOP + MESSAGES_ID + CLOSE + COMMA + TABLE_MESSAGES + STOP + MESSAGES_NAME + COMMA + TABLE_MESSAGES + STOP + MESSAGES_CREATOR + COMMA + TABLE_MESSAGES + STOP + MESSAGES_TIMECREATOR + COMMA + TABLE_MESSAGES + STOP + MESSAGES_FILES + COMMA + TABLE_MESSAGES + STOP + MESSAGES_REMOVE + COMMA + TABLE_MESSAGES + STOP + MESSAGES_FULLTEXT +  COMMA + TABLE_RECEIVERS + STOP + RECIEVERS_ID + AS + "RECIEVERSID" + COMMA + TABLE_RECEIVERS + STOP + RECIEVERS_READ + COMMA + TABLE_RECEIVERS + STOP + RECIEVERS_REMOVE + AS + "RECIEVERSREMOVE" + COMMA + TABLE_RECEIVERS + STOP + RECIEVERS_TO_PERSON + COMMA + TABLE_RECEIVERS + STOP + RECIEVERS_HIDDEN + AS + "RECIEVERSHIDDEN" + FROM + TABLE_MESSAGES + LEFT_JOIN + TABLE_RECEIVERS + ON + TABLE_MESSAGES + STOP + MESSAGES_ID + EQUAL + TABLE_RECEIVERS + STOP + RECIEVERS_MESSAGES_ID + WHERE + TRUE;
   
    public final String[] SQL_WHERE = {AND + TABLE_RECEIVERS + STOP + RECIEVERS_REMOVE + EQUAL + 0 + AND + TABLE_RECEIVERS + STOP + RECIEVERS_TO_PERSON + EQUAL + QUESTION,
   AND + TABLE_MESSAGES + STOP + MESSAGES_REMOVE + EQUAL + 0 + AND + TABLE_MESSAGES + STOP + MESSAGES_CREATOR + EQUAL + QUESTION,
    AND +  OPEN + TABLE_MESSAGES + STOP + MESSAGES_REMOVE + EQUAL + 1 + AND + TABLE_MESSAGES + STOP + MESSAGES_CREATOR + EQUAL + QUESTION + CLOSE + OR + OPEN + TABLE_RECEIVERS + STOP + RECIEVERS_REMOVE + EQUAL + 1 + AND + TABLE_RECEIVERS + STOP + RECIEVERS_TO_PERSON + EQUAL + QUESTION + CLOSE};  
    public final String SQL_INSERT_RECIEVER = INSERT_INTO + TABLE_RECEIVERS + FIELDS(RECIEVERS_ALL_FIELDS, true) +  SELECT + QUESTION + COMMA + USERS_USER_ID + COMMA + QUESTION + COMMA + QUESTION + COMMA + QUESTION + COMMA + QUESTION + FROM + TABLE_USERS + WHERE + USERS_ROLE + DIFF + IRoles.RADMINISTRATOR ;    
    public final String SQL_UPDATE_REMOVE_MESSAGES = UPDATE + TABLE_MESSAGES + SET +  MESSAGES_REMOVE +  EQUAL + QUESTION  + WHERE + MESSAGES_ID + EQUAL + QUESTION + AND + MESSAGES_CREATOR + EQUAL + QUESTION;
    public final String SQL_UPDATE_REMOVE_RECIEVER = UPDATE + TABLE_RECEIVERS + SET +  RECIEVERS_REMOVE +  EQUAL + QUESTION  + WHERE + RECIEVERS_MESSAGES_ID + EQUAL + QUESTION + AND + RECIEVERS_TO_PERSON + EQUAL + QUESTION;
    public final String SQL_UPDATE_READED = UPDATE + TABLE_RECEIVERS + SET +  RECIEVERS_READ +  EQUAL + QUESTION  + WHERE + RECIEVERS_MESSAGES_ID + EQUAL + QUESTION + AND + RECIEVERS_TO_PERSON + EQUAL + QUESTION;
    public final String SQL_SELECT_RECIEVER_BY_MESS_ID = SELECT + STAR + FROM + TABLE_RECEIVERS + WHERE + RECIEVERS_MESSAGES_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_ALL_USERS_MESSAGE_RECV = SELECT  + TABLE_RECEIVERS + STOP + RECIEVERS_TO_PERSON + COMMA + TABLE_USERS + STOP + USERS_FULLNAME +  FROM + TABLE_RECEIVERS + LEFT_JOIN + TABLE_USERS + ON + TABLE_USERS + STOP + USERS_USER_ID + EQUAL + TABLE_RECEIVERS + STOP + RECIEVERS_TO_PERSON + WHERE  + TABLE_RECEIVERS + STOP + RECIEVERS_MESSAGES_ID + EQUAL + QUESTION;
    //public final String SQL_BROADCAST_INSERT= INSERT_INTO + TABLE_BROADCAST + FIELDS(BROADCAST_ALL_FIELDS,true) + SELECT + QUESTION + COMMA + QUESTION + COMMA + QUESTION + COMMA + QUESTION + COMMA + QUESTION + COMMA + MAX + OPEN + BROADCAST_ORDERS + CLOSE + "+ 1"  + FROM + TABLE_BROADCAST;
    
     public final String SQL_BROADCAST_INSERT  =  INSERT_INTO + TABLE_BROADCAST + FIELDS(BROADCAST_ALL_FIELDS,true) + VALUES(BROADCAST_ALL_FIELDS.length);
    public final String SQL_BROADCAST_UPDATE= UPDATE + TABLE_BROADCAST + SET + SETS(BROADCAST_ALL_FIELDS) + WHERE + BROADCAST_ID + EQUAL + QUESTION;    
    public final String SQL_BROADCAST_UPDATE_ORDER= UPDATE + TABLE_BROADCAST + SET + BROADCAST_ORDERS + EQUAL + QUESTION + WHERE + BROADCAST_ID + EQUAL + QUESTION;    
    public final String SQL_BROADCAST_UPDATE_ORDER2=UPDATE + TABLE_BROADCAST + SET + BROADCAST_ORDERS + EQUAL + QUESTION + WHERE + BROADCAST_ID + EQUAL + QUESTION;    
    
    public final String SQL_BROADCAST_SELECT_ALL =SELECT + TABLE_BROADCAST + STOP + STAR + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + FROM + TABLE_BROADCAST + LEFT_JOIN + TABLE_USERS + ON + TABLE_BROADCAST + STOP + BROADCAST_USER_ID + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + WHERE + TRUE ;
   


    //SELECT + STAR + FROM + TABLE_BROADCAST + WHERE + BROADCAST_USER_ID + EQUAL + QUESTION;
    public final String SQL_BROADCAST_ADD_TITLE = AND + BROADCAST_TITLE + LIKE + QUESTION ;    
    public final String SQL_BROADCAST_ADD_CREATETIME = AND + BROADCAST_CREATETIME + ">=" + QUESTION + AND + BROADCAST_CREATETIME + "<" + QUESTION ;    
    public final String SQL_BROADCAST_ORDER_BY = ORDER_BY + BROADCAST_ORDERS + DESC;    
    public final String SQL_BROADCAST_SELECT_ALL_SHOW = SELECT + STAR + FROM + TABLE_BROADCAST + WHERE +  BROADCAST_CREATETIME + ">=" + QUESTION + AND + BROADCAST_CREATETIME + "<" + QUESTION ;    
    
    public final String SQL_BROADCAST_SELECT_ALL_SHOW_2 = SELECT + STAR + FROM + TABLE_BROADCAST;    

    public final String SQL_BROADCAST_CHECK_TITLE = SELECT + BROADCAST_TITLE + FROM + TABLE_BROADCAST + WHERE + BROADCAST_TITLE + EQUAL + QUESTION + AND + BROADCAST_ID + DIFF + QUESTION; 
    public final String SQL_BROADCAST_SELECT_BROADCAST_BY_ID = SELECT + STAR + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + FROM + TABLE_BROADCAST + LEFT_JOIN + TABLE_USERS + ON + TABLE_BROADCAST + STOP + BROADCAST_USER_ID + EQUAL + TABLE_USERS + STOP + USERS_USER_ID  + WHERE + BROADCAST_ID + EQUAL + QUESTION;
    public final String SQL_BROADCAST_SELECT_BY_ORDER=SELECT + STAR + FROM + TABLE_BROADCAST + WHERE + BROADCAST_ORDERS + EQUAL + QUESTION;
    public final String SQL_BROADCAST_ORDERS_BROADCAST = SELECT + STAR + FROM + TABLE_BROADCAST + WHERE + BROADCAST_ORDERS + EQUAL + OPEN +  "#" + CLOSE; 
    public final String SQL_BROADCAST_ORDERS_MAX_BROADCAST = SELECT + MAX + OPEN + BROADCAST_ORDERS + CLOSE + FROM + TABLE_BROADCAST + WHERE + BROADCAST_ORDERS + "<" + QUESTION;
    public final String SQL_BROADCAST_ORDERS_MIN_BROADCAST = SELECT + MIN + OPEN + BROADCAST_ORDERS + CLOSE + FROM + TABLE_BROADCAST + WHERE + BROADCAST_ORDERS + ">" + QUESTION;

   
}
