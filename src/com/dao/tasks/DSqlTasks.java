package com.dao.tasks;


import com.dao.admin.doc.DSqlAdminDoc;

import com.inf.IRoles;

public class DSqlTasks extends DSqlAdminDoc {
 
    public final String SQL_SELECT_ALL_CATEGORIES = SELECT + STAR + FROM + TABLE_TASK_CATEGORIES + WHERE  + TRUE ;
    public final String SQL_SELECT_ALL_USERS = SELECT + STAR + FROM + TABLE_USERS + WHERE  + USERS_ROLE + DIFF + IRoles.RADMINISTRATOR  ;
    public final String SQL_SELECT_ALL_USERS_FULLNAME =  USERS_FULLNAME + LIKE + QUESTION ;
    public final String SQL_SELECT_ALL_USERS_PHONE = OR + USERS_PHONE + LIKE + QUESTION ;
    public final String SQL_SELECT_ALL_USERS_ADDRESS = OR + USERS_ADDRESS + LIKE + QUESTION;
    public final String SQL_SELECT_ALL_USERS_DEPARTMENT = AND + USERS_DEPARTMENT_ID + EQUAL + QUESTION;

    public final String SQL_SELECT_CATEGORIES_ADD_WHERE_CREATOR = AND + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_CREATOR + EQUAL + QUESTION;

    public final String SQL_SELECT_ADD_ORDER = ORDER_BY  + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_TITLE + ASC;
    public final String SQL_CATEGORIES_WHERE_TITLE = AND + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_TITLE + LIKE + QUESTION;
    public final String SQL_CATEGORIES_WHERE_FROM_DATETIME = AND + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_TIMECREATE + LIKE + QUESTION;
    public final String SQL_CATEGORIES_WHERE_TO_DATETIME = AND + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_TIMECREATE + "<=" + QUESTION;

    
    public final String SQL_INSERT_CATEGORIES = INSERT_INTO + TABLE_TASK_CATEGORIES + FIELDS(TASK_CATEGORIES_ALL_FIELDS, true) +  VALUES(TASK_CATEGORIES_ALL_FIELDS.length);    ;
    public final String SQL_CATEGORIES_UPDATE = UPDATE + TABLE_TASK_CATEGORIES + SET + SETS(TASK_CATEGORIES_ALL_FIELDS) + WHERE + TASK_CATEGORIES_CATEGORY_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_CATEGORIES_BY_ID = SQL_SELECT_ALL_CATEGORIES + AND + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_CATEGORY_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_CREATOR_NAME = SELECT + TABLE_USERS + STOP + USERS_FULLNAME + FROM + TABLE_USERS + WHERE + TABLE_USERS + STOP + USERS_USER_ID + EQUAL + QUESTION; 
    public final String SQL_SELECT_STATUST_RULE_BY_USER = SELECT + TABLE_DOC_RULES + STOP+ DOC_RULES_STATUS_ID + FROM + TABLE_DOC_RULES + LEFT_JOIN + TABLE_DOC_BOSS + ON +TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_BOSS + STOP + DOC_BOSS_RULE_ID + WHERE + TABLE_DOC_RULES + STOP + DOC_RULES_ACTIVE + DIFF + 0 + AND + TABLE_DOC_RULES + STOP + DOC_RULES_WORKFLOW_ID + EQUAL + QUESTION + AND + TABLE_DOC_BOSS + STOP + DOC_BOSS_USER_ID + EQUAL + QUESTION; 


    public final String SQL_SELECT_CATEGORIES_NAME = SELECT + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_TITLE + FROM + TABLE_TASK_CATEGORIES + WHERE + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_CATEGORY_ID + EQUAL + QUESTION; 


     // SQL of problem
    
    public final String SQL_SELECT_ALL_PROPLEM = 
    SELECT + TABLE_TASK_PROBLEMS + STOP + STAR + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + COMMA + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_TITLE + AS + "TASKCATEGORIESTITLE" + FROM + TABLE_TASK_PROBLEMS + 
    LEFT_JOIN + TABLE_USERS + ON + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CREATOR + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + 
    LEFT_JOIN + TABLE_TASK_CATEGORIES + ON + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CATEGORY_ID + EQUAL + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_CATEGORY_ID + 
    WHERE + TRUE;
    
    public final String SQL_AND_WHERE_ALL_PROPLEM_NOT_COMPLETE=TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + IN + OPEN  + SELECT + TASK_ASSIGN_PROPLEM_ID + FROM + TABLE_TASK_ASSIGN + WHERE + OPEN + TASK_ASSIGN_HAVE_REPORT + EQUAL + 1 + OR + TASK_ASSIGN_COMPLETE + "<" + 100 + CLOSE + CLOSE;
    public final String SQL_AND_WHERE_ALL_PROPLEM_COMPLETE=TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + IN + OPEN  + SELECT + TASK_ASSIGN_PROPLEM_ID + FROM + TABLE_TASK_ASSIGN + WHERE + OPEN + TASK_ASSIGN_HAVE_REPORT + EQUAL + 0 + AND + TASK_ASSIGN_COMPLETE + EQUAL + 100 + CLOSE + CLOSE;
    
    
    public final String SQL_SELECT_PROPLEM_ORDER = ORDER_BY + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_TIMECREATE + DESC;
    public final String SQL_SELECT_PROPLEM_BY_ID =SQL_SELECT_ALL_PROPLEM  + AND + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + EQUAL + QUESTION ;
    public final String SQL_ADD_WHERE_ROOT = AND + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_ROOT + EQUAL + QUESTION;
    
    public final String SQL_SELECT_ALL_PROPLEM_ADD_WHERE = SQL_SELECT_ALL_PROPLEM + AND + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CREATOR + EQUAL + QUESTION + OR + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + IN + OPEN + SELECT + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID + FROM + TABLE_TASK_ASSIGN + WHERE + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + EQUAL + QUESTION + CLOSE; 
    
    public final String SQL_ALL_USER = SELECT + STAR + FROM + TABLE_USERS + ORDER_BY + USERS_USERNAME ;
    
    public final String[] SQL_SELECT_ALL_PROPLEM_FILL = {
    
    SQL_SELECT_ALL_PROPLEM +  AND + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CREATOR + EQUAL + QUESTION  + " # ",
    
    SELECT + TABLE_TASK_PROBLEMS + STOP + STAR + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_ASSIGN_ID + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_READ + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_ACCEPTED + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_INCHARGE + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_COMPLETE + AS + "TASKASSIGNCOMPLETE" + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_TIMEASSIGN + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_STOP + AS  + "TASKASSIGNSTOP" + FROM + TABLE_TASK_PROBLEMS + 
    LEFT_JOIN + TABLE_TASK_ASSIGN + ON + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + EQUAL + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID  + 
    LEFT_JOIN + TABLE_TASK_CATEGORIES + ON + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CATEGORY_ID + EQUAL + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_CATEGORY_ID  + 
    WHERE + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + EQUAL + QUESTION + "#"
    
    };
    public final String SQL_SELECT_ALL_PROPLEM_TASKS   =  SQL_SELECT_ALL_PROPLEM ;                                          
    public final String SQL_SELECT_PROPLEM_ADD_WHERE_TITLE = AND + OPEN + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_TITLE + LIKE + QUESTION ;
    public final String SQL_SELECT_PROPLEM_ADD_WHERE_PROBLEM = OR + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM + LIKE + QUESTION + CLOSE ;
    
    public final String[] SQL_SELECT_PROPLEM_ADD_WHERE_COMPLATE ={AND + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_COMPLETE + "#",
                                                                  AND + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_COMPLETE + "#"};
    
    public final String SQL_SELECT_AMOUNT_PROPLEM_SEND ="SELECT  COUNT(TASK_PROBLEMS.PROBLEM_ID) ,( SELECT  COUNT(TASK_PROBLEMS.PROBLEM_ID)  FROM TASK_PROBLEMS LEFT JOIN TASK_CATEGORIES ON TASK_CATEGORIES.CATEGORY_ID=TASK_PROBLEMS.CATEGORY_ID WHERE TASK_CATEGORIES.BLOCK=0  AND  TASK_PROBLEMS.CREATOR=? AND TASK_PROBLEMS.PROBLEM_ID IN ( SELECT TASK_ASSIGN.PROPLEM_ID FROM TASK_ASSIGN WHERE HAVE_REPORT=0 AND COMPLETE=100) )   FROM TASK_PROBLEMS LEFT JOIN TASK_CATEGORIES ON TASK_CATEGORIES.CATEGORY_ID=TASK_PROBLEMS.CATEGORY_ID WHERE TASK_CATEGORIES.BLOCK=0 AND  COMPLETE<100 AND TASK_PROBLEMS.CREATOR=? AND PROBLEM_ID IN (  SELECT PROPLEM_ID FROM TASK_ASSIGN WHERE HAVE_REPORT=1 OR COMPLETE<100) ";
    
//    SELECT + COUNT + OPEN + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + CLOSE + COMMA + OPEN + SELECT + COUNT + OPEN + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + CLOSE + FROM + TABLE_TASK_PROBLEMS + 
//    LEFT_JOIN + TABLE_TASK_CATEGORIES + ON + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_CATEGORY_ID + EQUAL + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CATEGORY_ID +
//    WHERE + AND + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_BLOCK + EQUAL + 0 + AND +
//    TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CREATOR + EQUAL + QUESTION +  AND + 
//    TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + IN + 
//    OPEN + SELECT +  TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID + FROM + TABLE_TASK_ASSIGN + WHERE + TASK_ASSIGN_HAVE_REPORT + EQUAL + 0 +  AND +  TASK_ASSIGN_COMPLETE + EQUAL + 100 + CLOSE +  
//    CLOSE + FROM + TABLE_TASK_PROBLEMS + WHERE + TASK_ASSIGN_COMPLETE + "<" + 100 +  AND + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CREATOR + EQUAL + QUESTION + AND + 
//    TASK_PROBLEMS_PROBLEM_ID + IN + OPEN + SELECT + TASK_ASSIGN_PROPLEM_ID + FROM + TABLE_TASK_ASSIGN + WHERE + TASK_ASSIGN_HAVE_REPORT + EQUAL + 1 + OR + TASK_ASSIGN_COMPLETE + "<" + 100 + CLOSE; 
    
    
    
    
    public final String SQL_SELECT_AMOUNT_PROPLEM_RECV =
    
    SELECT + COUNT + OPEN + TASK_ASSIGN_ASSIGN_ID + CLOSE + COMMA + OPEN + SELECT +  COUNT + OPEN + TASK_ASSIGN_ASSIGN_ID + CLOSE +  FROM + TABLE_TASK_ASSIGN + WHERE + TASK_ASSIGN_WORKER + EQUAL + QUESTION + CLOSE +  FROM + TABLE_TASK_ASSIGN + 
    WHERE + TASK_ASSIGN_COMPLETE + "<" + 100 +  AND + TASK_ASSIGN_WORKER + EQUAL + QUESTION + AND +  TASK_ASSIGN_PROPLEM_ID + IN + OPEN  + 
    SELECT + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + FROM + TABLE_TASK_PROBLEMS +  
    LEFT_JOIN + TABLE_TASK_CATEGORIES + ON + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_CATEGORY_ID + EQUAL + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CATEGORY_ID +
    WHERE + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_BLOCK + EQUAL + 0 +
    CLOSE;
    
    
    
    public final String SQL_SELECT_AMOUNT_MORE_DEADLINE_RECV=
    
    SELECT + COUNT + OPEN + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + CLOSE +  FROM + TABLE_TASK_PROBLEMS + 
    LEFT_JOIN + TABLE_TASK_ASSIGN + ON + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID + EQUAL + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + 
    LEFT_JOIN + TABLE_TASK_CATEGORIES + ON + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CATEGORY_ID + EQUAL + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_CATEGORY_ID + 
    WHERE + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_BLOCK + EQUAL + 0 + AND  + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_COMPLETE + "<" + 100 + AND + TASK_ASSIGN_WORKER + EQUAL + QUESTION +  AND + TASK_PROBLEMS_TODATE + "<=" + QUESTION + AND + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_STOP + EQUAL + QUESTION + AND + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_STOP + EQUAL + 0;

    public final String SQL_SELECT_AMOUNT_MORE_DEADLINE_SEND=
    SELECT + COUNT + OPEN + TABLE_TASK_PROBLEMS+STOP+TASK_PROBLEMS_PROBLEM_ID + CLOSE +  FROM +  TABLE_TASK_PROBLEMS + 
    LEFT_JOIN + TABLE_TASK_CATEGORIES + ON + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CATEGORY_ID + EQUAL + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_CATEGORY_ID +     
    WHERE + TABLE_TASK_PROBLEMS  + STOP +  TASK_PROBLEMS_COMPLETE + "<" + 100 + AND + TABLE_TASK_PROBLEMS  + STOP +  TASK_PROBLEMS_CREATOR + EQUAL + QUESTION + AND + TABLE_TASK_PROBLEMS  + STOP +  TASK_PROBLEMS_TODATE + "<=" + QUESTION + AND + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_BLOCK + EQUAL + 0 + AND + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_STOP + EQUAL + QUESTION;
    
    public final String SQL_SELECT_AMOUNT_PROPLEM_CATE = SELECT + COUNT + OPEN + TASK_CATEGORIES_CATEGORY_ID + CLOSE + FROM + TABLE_TASK_CATEGORIES + WHERE + TASK_CATEGORIES_CREATOR + EQUAL + QUESTION; 


    public final String SQL_USER_IN_PROPLEM = SELECT + STAR + FROM + TABLE_USERS + WHERE + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + TASK_ASSIGN_WORKER + FROM + TABLE_TASK_ASSIGN + WHERE + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION + CLOSE ;
    
    public final String SQL_SELECT_PROPLEM_REPORT_BY_ID = SELECT + STAR + FROM + TABLE_TASK_REPORTS + WHERE + TASK_REPORTS_REPORT_ID + EQUAL + QUESTION;

    
    public final String SQL_SELECT_BY_DEADLINE_RECV=
    
    SELECT + TABLE_TASK_PROBLEMS + STOP + STAR + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_ASSIGN_ID + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_READ + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_ACCEPTED + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_INCHARGE + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_COMPLETE + AS + "TASKASSIGNCOMPLETE" + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_TIMEASSIGN + COMMA + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_STOP + AS + "TASKASSIGNSTOP" + FROM + TABLE_TASK_PROBLEMS + 
    LEFT_JOIN + TABLE_TASK_CATEGORIES + ON + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CATEGORY_ID + EQUAL + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_CATEGORY_ID + 
    LEFT_JOIN + TABLE_TASK_ASSIGN + ON + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_PROBLEM_ID + EQUAL + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID + 
    
    WHERE + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_COMPLETE + "<" + 100 + AND + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + EQUAL + QUESTION + AND + TASK_PROBLEMS_TODATE + "<=" + QUESTION + AND + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_BLOCK + EQUAL + 0;// ORDER_BY + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_TIMECREATE + DESC ;
    public final String SQL_SELECT_BY_DEADLINE_SEND=SELECT + TABLE_TASK_PROBLEMS + STOP + STAR +  FROM +  TABLE_TASK_PROBLEMS + LEFT_JOIN + TABLE_TASK_CATEGORIES + ON + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CATEGORY_ID + EQUAL + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_CATEGORY_ID + WHERE + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_COMPLETE + "<" + 100 +  AND +  TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CREATOR + EQUAL + QUESTION + AND + TASK_PROBLEMS_TODATE + "<=" + QUESTION + AND + TABLE_TASK_CATEGORIES + STOP + TASK_CATEGORIES_BLOCK + EQUAL + 0;// +  ORDER_BY + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_TIMECREATE + DESC;
    
    public final String SQL_SELECT_BY_CATEGORIES = AND + TABLE_TASK_PROBLEMS + STOP + TASK_PROBLEMS_CATEGORY_ID + EQUAL + QUESTION ;
    public final String SQL_SELECT_PROPLEM_CHECK_EDIT = SELECT + TASK_ASSIGN_ASSIGN_ID + FROM + TABLE_TASK_ASSIGN + WHERE + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION + AND + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_ACCEPTED + EQUAL + 1;
    public final String SQL_SELECT_PROPLEM_ASSIGN_ID = SELECT + TASK_ASSIGN_ASSIGN_ID + FROM + TABLE_TASK_ASSIGN + WHERE + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION ;
    
    public final String SQL_SELECT_CHECK_HAVE_REPORT=SELECT +  COUNT + "(*)" +  FROM +  TABLE_TASK_ASSIGN + WHERE + TASK_ASSIGN_PROPLEM_ID + IN + OPEN + SELECT + TASK_PROBLEMS_PROBLEM_ID + FROM + TABLE_TASK_PROBLEMS + WHERE + TASK_PROBLEMS_CREATOR + EQUAL + QUESTION +  AND +  TASK_PROBLEMS_COMPLETE + "<" + 100 + CLOSE +  AND + TASK_ASSIGN_HAVE_REPORT + EQUAL + 1;
    
    public final String SQL_SELECT_CHECK_HAVE_REVIEW="SELECT COUNT(*) FROM TASK_ASSIGN WHERE WORKER=? AND PROPLEM_ID IN (SELECT problem_id FROM TASK_PROBLEMS) AND ASSIGN_HAVE_REPORT=1";
    //SELECT + COUNT+ OPEN + TASK_PROBLEMS_PROBLEM_ID + CLOSE + FROM + TABLE_TASK_PROBLEMS + WHERE + TASK_PROBLEMS_CREATOR + EQUAL + QUESTION + AND + TASK_PROBLEMS_ACTIVE_REPORT + EQUAL + 1;


    public final String SQL_SELECT_PROPLEM_INCHARGE = SELECT + TASK_ASSIGN_ASSIGN_ID + FROM + TABLE_TASK_ASSIGN + WHERE + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION + AND + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + EQUAL + QUESTION + AND + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_INCHARGE + EQUAL + QUESTION;

    public final String SQL_INSERT_PROPLEM = INSERT_INTO + TABLE_TASK_PROBLEMS + FIELDS(TASK_PROBLEMS_ALL_FIELDS, true) +  VALUES(TASK_PROBLEMS_ALL_FIELDS.length);    ;
    public final String SQL_PROPLEM_UPDATE = UPDATE + TABLE_TASK_PROBLEMS + SET + SETS(TASK_PROBLEMS_ALL_FIELDS) + WHERE + TASK_PROBLEMS_PROBLEM_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_PROPLEM_ASSIGN_CHECK = SELECT + STAR + FROM + TABLE_TASK_ASSIGN_BOSS + WHERE + TASK_ASSIGN_BOSS_USER_ID + EQUAL + QUESTION;
    
    public final String SQL_SELECT_PROPLEM_ASSIGN_WORKER = SELECT + STAR + FROM + TABLE_TASK_ASSIGN + WHERE + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION + AND  + TASK_ASSIGN_WORKER + IN + OPEN + "#" + CLOSE;

    public final String SQL_PROPLEM_UPDATE_ACCEPTED = UPDATE + TABLE_TASK_ASSIGN + SET + TASK_ASSIGN_ACCEPTED + EQUAL + QUESTION + WHERE + TASK_ASSIGN_ASSIGN_ID + EQUAL + QUESTION + AND + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION;
    

    public final String SQL_PROPLEM_UPDATE_STOP = UPDATE + TABLE_TASK_PROBLEMS + SET + TASK_PROBLEMS_STOP + EQUAL + QUESTION + WHERE + TASK_PROBLEMS_PROBLEM_ID + EQUAL + QUESTION;
    public final String SQL_PROPLEM_ASSIGN_UPDATE_STOP = UPDATE + TABLE_TASK_ASSIGN + SET + TASK_ASSIGN_STOP + EQUAL + QUESTION + WHERE + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION;
    public final String SQL_ASSIGN_UPDATE_STOP = UPDATE + TABLE_TASK_ASSIGN + SET + TASK_ASSIGN_STOP + EQUAL + QUESTION + WHERE + TASK_ASSIGN_ASSIGN_ID + EQUAL + QUESTION;
    public final String SQL_ASSIGN_UPDATE_INCHARGE = UPDATE + TABLE_TASK_ASSIGN + SET + TASK_ASSIGN_INCHARGE + EQUAL + QUESTION + WHERE + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION;


    public final String SQL_PROPLEM_UPDATE_READED = UPDATE + TABLE_TASK_ASSIGN + SET + TASK_ASSIGN_READ + EQUAL + QUESTION + WHERE + TASK_ASSIGN_ASSIGN_ID + EQUAL + QUESTION + AND + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION;
    public final String SQL_PROPLEM_UPDATE_READED_BY_PROPLEMID = UPDATE + TABLE_TASK_ASSIGN + SET + TASK_ASSIGN_READ + EQUAL + QUESTION + WHERE + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION;

    public final String SQL_PROPLEM_UPDATE_COMPLATE = UPDATE + TABLE_TASK_PROBLEMS + SET + TASK_PROBLEMS_COMPLETE + EQUAL + QUESTION + WHERE + TASK_PROBLEMS_PROBLEM_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_PROPLEM_MAX_ID =  SELECT + MAX(TASK_PROBLEMS_PROBLEM_ID) + FROM + TABLE_TASK_PROBLEMS + WHERE + TASK_PROBLEMS_CREATOR + EQUAL + QUESTION ;
    
    public final String SQL_SELECT_ALL_PROPLEM_ASSIGN = SELECT + STAR +  FROM + TABLE_TASK_ASSIGN + WHERE + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION + ORDER_BY  + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_TIMEASSIGN + ASC;
    public final String SQL_SELECT_PROPLEM_ASSIGN_ADD_WHERE_WORDKER = AND + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + EQUAL + QUESTION;

    public final String SQL_SELECT_ALL_ASSIGN_TRUE = SELECT + TABLE_TASK_ASSIGN + STOP + STAR + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + FROM + TABLE_TASK_ASSIGN + LEFT_OUTER_JOIN + TABLE_USERS + ON + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + EQUAL + TABLE_USERS + STOP + USERS_USER_ID ;
    public final String SQL_INSERT_ASSIGN = INSERT_INTO + TABLE_TASK_ASSIGN + FIELDS(TASK_ASSIGN_ALL_FIELDS, true) +  VALUES(TASK_ASSIGN_ALL_FIELDS.length);        
    
    public final String SQL_SELECT_ASSIGN_BY_ID = SELECT + STAR + FROM + TABLE_TASK_ASSIGN + WHERE + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION + AND + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + EQUAL + QUESTION;
    public final String SQL_SELECT_ASSIGN_ID =  SQL_SELECT_ALL_ASSIGN_TRUE + WHERE + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_ASSIGN_ID + EQUAL + QUESTION ;    
    public final String SQL_SELECT_ALL_ASSIGN = SQL_SELECT_ALL_ASSIGN_TRUE + WHERE + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION + "#" + ORDER_BY + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_TIMEASSIGN + DESC;    
    public final String SQL_SELECT_ALL_ASSIGN_ACCEPTED = SELECT + TASK_ASSIGN_ASSIGN_ID + COMMA + TASK_ASSIGN_ACCEPTED + FROM + TABLE_TASK_ASSIGN + WHERE + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION + AND + TASK_ASSIGN_WORKER + EQUAL + QUESTION;


    // Report      

    public final String SQL_INSERT_REPORTS = INSERT_INTO + TABLE_TASK_REPORTS + FIELDS(TASK_REPORTS_ALL_FIELDS, true) +  VALUES(TASK_REPORTS_ALL_FIELDS.length);    ;
    public final String SQL_SELECT_REPORT  = SELECT + STAR + FROM + TABLE_TASK_REPORTS + WHERE + TRUE;
     public final String SQL_SELECT_REPORT_REVIEW  = SELECT + TABLE_TASK_REPORTS + STOP + STAR + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + FROM + TABLE_TASK_REPORTS + INNER_JOIN + TABLE_USERS + ON + TABLE_TASK_REPORTS + STOP + TASK_REPORTS_CREATOR + EQUAL + TABLE_USERS + STOP + USERS_USER_ID;
     public final String SQL_SELECT_REPORT_ALL  = SELECT + TABLE_TASK_REPORTS + STOP + STAR + COMMA  + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + COMMA  + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_COMPLETE + AS + "TASKASSIGNCOMPLETE" + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + FROM + TABLE_TASK_REPORTS + LEFT_JOIN + TABLE_TASK_ASSIGN + ON + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_ASSIGN_ID + EQUAL + TABLE_TASK_REPORTS + STOP + TASK_REPORTS_ASSIGN_ID + LEFT_JOIN + TABLE_USERS + ON + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + WHERE + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION + ORDER_BY  + TABLE_TASK_ASSIGN + STOP + TASK_ASSIGN_WORKER + COMMA + TABLE_TASK_REPORTS + STOP + TASK_REPORTS_TIMEREPORT + DESC;
     public final String SQL_SELECT_REPORT_ADD_ASSIGN_ID = AND + TASK_REPORTS_ASSIGN_ID + EQUAL + QUESTION;
     public final String SQL_SELECT_REPORT_ADD_PROBLEM_ID = AND + TASK_REPORTS_PROBLEM_ID + EQUAL + QUESTION;

     public final String SQL_SELECT_REPORT_ORDER_DESC = ORDER_BY + TASK_REPORTS_TIMEREPORT + DESC;

     public final String SQL_SELECT_REPORT_ADD_WERE = AND + OPEN + TABLE_TASK_REPORTS + STOP + TASK_REPORTS_ASSIGN_ID + EQUAL + QUESTION + CLOSE ;
     
     public final String SQL_SELECT_REPORT_ADD_WERE_CREATOR = AND + OPEN  + TABLE_TASK_REPORTS + STOP + TASK_REPORTS_PROBLEM_ID + EQUAL + QUESTION + AND + TABLE_TASK_REPORTS + STOP + TASK_REPORTS_CREATOR + EQUAL + QUESTION + AND + TABLE_TASK_REPORTS + STOP + TASK_REPORTS_ASSIGN_ID + EQUAL + 0   + CLOSE ;
     public final String SQL_SELECT_REPORT_ORDER = ORDER_BY + TABLE_TASK_REPORTS + STOP + TASK_REPORTS_TIMEREPORT + DESC ;
     public final String SQL_ASSINH_COMPLATE_UPDATE = UPDATE + TABLE_TASK_ASSIGN + SET + TASK_ASSIGN_COMPLETE + EQUAL + QUESTION + COMMA + TASK_ASSIGN_HAVE_REPORT + EQUAL + QUESTION + WHERE + TASK_ASSIGN_ASSIGN_ID + EQUAL + QUESTION;
     
    public final String SQL_UPDATE_HAVE_A_REPORT=UPDATE + TABLE_TASK_ASSIGN + SET + TASK_ASSIGN_ASSIGN_HAVE_REPORT + EQUAL + QUESTION + WHERE + TASK_ASSIGN_PROPLEM_ID + EQUAL + QUESTION + AND + TASK_ASSIGN_WORKER + IN + OPEN +  "#"  + CLOSE;
    
    
    public final String SQL_UPDATE_PROBLEM_ACTIVE=UPDATE + TABLE_TASK_PROBLEMS + SET + TASK_PROBLEMS_ACTIVE_REPORT + EQUAL + QUESTION + WHERE + TASK_PROBLEMS_PROBLEM_ID + EQUAL + QUESTION;
    
    public final String SQL_UPDATE_ASSIGN_STATUS_REPORT= UPDATE + TABLE_TASK_ASSIGN + SET + TASK_ASSIGN_HAVE_REPORT + EQUAL + QUESTION + WHERE + TASK_ASSIGN_ASSIGN_ID + EQUAL + QUESTION + AND + TASK_ASSIGN_WORKER + DIFF + QUESTION;
    public final String SQL_UPDATE_ASSIGN_STATUS_REVIEW= UPDATE + TABLE_TASK_ASSIGN + SET + TASK_ASSIGN_ASSIGN_HAVE_REPORT + EQUAL + QUESTION + WHERE + TASK_ASSIGN_ASSIGN_ID + EQUAL + QUESTION + AND + TASK_ASSIGN_WORKER + EQUAL + QUESTION;

    
     public final String SQL_SELECT_ALL_RULES = SELECT + STAR +  FROM + TABLE_TASK_ASSIGN_RULES + ORDER_BY + TASK_ASSIGN_RULES_RULE_ID + DESC;
     //public final String SQL_SELECT_MAX_BY_ID = SELECT + TOP + PARAM_01 + STAR +  FROM + TABLE_TASK_ASSIGN_RULES + ORDER_BY + TASK_ASSIGN_RULES_RULE_ID + DESC;    
     public final String SQL_INSERT_ASSIGN_RULES = INSERT_INTO + TABLE_TASK_ASSIGN_RULES + FIELDS(TASK_ASSIGN_RULES_ALL_FIELDS, true) +  VALUES(TASK_ASSIGN_RULES_ALL_FIELDS.length);    
     public final String SQL_INSERT_ASSIGN_BOSS = INSERT_INTO + TABLE_TASK_ASSIGN_BOSS + FIELDS(TASK_ASSIGN_BOSS_ALL_FIELDS, true) +  VALUES(TASK_ASSIGN_BOSS_ALL_FIELDS.length);    
     public final String SQL_INSERT_ASSIGN_OFFICERS = INSERT_INTO + TABLE_TASK_ASSIGN_OFFICERS + FIELDS(TASK_ASSIGN_OFFICERS_ALL_FIELDS, true) +  VALUES(TASK_ASSIGN_OFFICERS_ALL_FIELDS.length);    
     public final String SQL_ASSIGN_RULES_UPDATE = UPDATE + TABLE_TASK_ASSIGN_RULES + SET + SETS(TASK_ASSIGN_RULES_ALL_FIELDS) + WHERE + TASK_ASSIGN_RULES_RULE_ID + EQUAL + QUESTION;
    
    
    public final String SQL_USER_IN_REC_TO_PERSON = SELECT + STAR + FROM + TABLE_USERS + WHERE + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + RECIEVERS_TO_PERSON + FROM + TABLE_RECEIVERS + WHERE + RECIEVERS_MESSAGES_ID + EQUAL + QUESTION + CLOSE + AND + TABLE_USERS + STOP + USERS_USER_ID + DIFF + QUESTION;
    public final String SQL_USER_WHERE_DEPARTMENT = AND + TABLE_USERS + STOP + USERS_DEPARTMENT_ID + EQUAL + QUESTION;
    
    public final String SQL_TASK_RULE_JOIN = AND + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + TABLE_TASK_ASSIGN_OFFICERS + STOP + TASK_ASSIGN_OFFICERS_USER_ID + FROM + TABLE_TASK_ASSIGN_OFFICERS + LEFT_JOIN + TABLE_TASK_ASSIGN_RULES + ON + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_RULE_ID + EQUAL + TABLE_TASK_ASSIGN_OFFICERS + STOP + TASK_ASSIGN_OFFICERS_RULE_ID + LEFT_JOIN + TABLE_TASK_ASSIGN_BOSS + ON + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_RULE_ID + EQUAL + TABLE_TASK_ASSIGN_BOSS + STOP + TASK_ASSIGN_BOSS_RULE_ID + WHERE + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_ACTIVE + DIFF + 0 + AND + TABLE_TASK_ASSIGN_BOSS + STOP + TASK_ASSIGN_BOSS_USER_ID + EQUAL + QUESTION + CLOSE ;
    public final String SQL_DEPARTMENT_SELECT_ALL_DEPARTMENT_IN_RULE   =  SELECT + DEPARTMENTS_DEPARTMENT_ID + COMMA + DEPARTMENTS_NAME + COMMA + DEPARTMENTS_PARENT_ID + FROM + TABLE_DEPARTMENTS ;
    public final String SQL_DEPARTMENT_ADD_WHERE_ID_BY_RULE = WHERE + DEPARTMENTS_DEPARTMENT_ID + IN + OPEN + "#" + CLOSE;   
    public final String SQL_DEPARTMENT_SELECT_ADD_WHERE_IN_TASK_RULE = SELECT + DISTINCT + OPEN + TABLE_USERS + STOP + USERS_DEPARTMENT_ID + CLOSE + FROM + TABLE_USERS + WHERE +  TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + TABLE_TASK_ASSIGN_OFFICERS + STOP + TASK_ASSIGN_OFFICERS_USER_ID + FROM + TABLE_TASK_ASSIGN_OFFICERS + LEFT_JOIN + TABLE_TASK_ASSIGN_RULES + ON + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_RULE_ID + EQUAL + TABLE_TASK_ASSIGN_OFFICERS + STOP + TASK_ASSIGN_OFFICERS_RULE_ID + LEFT_JOIN + TABLE_TASK_ASSIGN_BOSS + ON + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_RULE_ID + EQUAL + TABLE_TASK_ASSIGN_BOSS + STOP + TASK_ASSIGN_BOSS_RULE_ID + WHERE + TABLE_TASK_ASSIGN_BOSS + STOP + TASK_ASSIGN_BOSS_USER_ID + EQUAL + QUESTION  + AND + TABLE_TASK_ASSIGN_RULES + STOP + TASK_ASSIGN_RULES_ACTIVE  + DIFF + 0 + CLOSE;
    public final String SQL_DEPARTMENT_SELECT_ALL_DEPARTMENT  =  SELECT + FIELDS("A",new String[]{DEPARTMENTS_DEPARTMENT_ID ,DEPARTMENTS_NAME,DEPARTMENTS_PARENT_ID }) + COMMA + 
                                                            FIELDS("B",new String[]{DEPARTMENTS_DEPARTMENT_ID ,DEPARTMENTS_NAME,DEPARTMENTS_PARENT_ID }) + 
                                                            FROM + TABLE_DEPARTMENTS + " A" + LEFT_OUTER_JOIN + TABLE_DEPARTMENTS + " B" + 
                                                            ON + "B." + DEPARTMENTS_PARENT_ID + EQUAL + "A." + DEPARTMENTS_DEPARTMENT_ID ;


}
