package com.dao.report;


import com.dao.foryou.DSqlForYou;


public class DSqlReport extends DSqlForYou{

    public final String  SQL_SELECT_USERS_RECV_REPORT=SELECT + TABLE_REPORTS_SHARE + STOP + REPORT_SHARE_USER_ID + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + FROM + TABLE_REPORTS_SHARE + LEFT_JOIN + TABLE_USERS + ON + TABLE_USERS + STOP + USERS_USER_ID + EQUAL + TABLE_REPORTS_SHARE + STOP + REPORT_SHARE_USER_ID + WHERE + TABLE_REPORTS_SHARE + STOP + REPORT_SHARE_REPORT_ID + EQUAL + QUESTION;
    public final String   SQL_INSERT_REPORT_USERS=INSERT_INTO + TABLE_REPORTS_SHARE + FIELDS(REPORT_SHARE_ALL_FIELDS,true) + VALUES(REPORT_SHARE_ALL_FIELDS.length);
    public final String SQL_SELECT_REPORT_BY_TOP=SELECT + MAX(REPORT_ID) + FROM + TABLE_REPORTS + WHERE + REPORT_USERS_ID + EQUAL + QUESTION;
    
    //REPORT category  in here
      public final String SQL_REPORT_TYPE_SELECT_ALL = SELECT + STAR + FROM + TABLE_REPORT_CATEGORY + ORDER_BY + REPORT_CATEGORY_NAME;
      public final String SQL_REPORT_TYPE_SELECT_SINGLE_ROW = SELECT + STAR + FROM + TABLE_REPORT_CATEGORY + WHERE + REPORT_CATEGORY_ID + EQUAL + QUESTION;
      public final String SQL_REPORT_TYPE_ADD_NEW = INSERT_INTO + TABLE_REPORT_CATEGORY + FIELDS(REPORT_CATEGORY_ALL_FIELDS,true)+ VALUES(REPORT_CATEGORY_ALL_FIELDS.length);
      public final String SQL_REPORT_TYPE_UPDATE = UPDATE + TABLE_REPORT_CATEGORY + SET + SETS(REPORT_CATEGORY_ALL_FIELDS)+ WHERE + REPORT_CATEGORY_ID + EQUAL + QUESTION;
      public final String SQL_REPORT_TYPE_CHECK_NAME = SELECT + STAR + FROM + TABLE_REPORT_CATEGORY + WHERE + REPORT_CATEGORY_NAME + EQUAL + QUESTION;
      public final String SQL_REPORT_TYPE_CHECK_NAME_ID = SELECT + STAR + FROM + TABLE_REPORT_CATEGORY + WHERE + REPORT_CATEGORY_NAME + EQUAL + QUESTION + AND + REPORT_CATEGORY_ID + DIFF + QUESTION;
      public final String SQL_REPORT_TYPE_CHECK_CODE_ID = SELECT + STAR + FROM + TABLE_REPORT_CATEGORY + WHERE + REPORT_CATEGORY_CODE + EQUAL + QUESTION + AND + REPORT_CATEGORY_ID + DIFF + QUESTION;   
      public final String SQL_REPORT_TYPE_SELECT_BY_ID = SELECT + STAR + FROM + TABLE_REPORT_CATEGORY + WHERE + REPORT_CATEGORY_ID + EQUAL + QUESTION;
      public final String SQL_REPORT_TYPE_CHECK_CODE = SELECT + STAR + FROM + TABLE_REPORT_CATEGORY + WHERE + REPORT_CATEGORY_CODE + EQUAL + QUESTION;
    //report
        public final String SQL_REPORT_BY_ID=SELECT + TABLE_REPORTS+STOP+STAR+COMMA+TABLE_USERS+STOP +USERS_FULLNAME  + FROM + TABLE_REPORTS + LEFT_JOIN + TABLE_USERS + ON + TABLE_REPORTS + STOP + REPORT_USERS_ID + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + WHERE +  TABLE_REPORTS+STOP+REPORT_ID+EQUAL+QUESTION;
        public final String SQL_REPORT_INSERT=INSERT_INTO + TABLE_REPORTS + FIELDS(REPORT_ALL_FIELDS,true) + VALUES(REPORT_ALL_FIELDS.length);
        public final String SQL_REPORT_UPDATE=UPDATE + TABLE_REPORTS + SET + SETS(REPORT_ALL_FIELDS) + WHERE + REPORT_ID + EQUAL + QUESTION;
        public final String SQL_SELECT_ALL_REPORT=SELECT + TABLE_USERS + STOP + USERS_FULLNAME + COMMA + TABLE_REPORT_CATEGORY + STOP + REPORT_CATEGORY_NAME + AS + "NAME_CATEGORY" + COMMA + TABLE_REPORTS + STOP + STAR +  FROM + TABLE_REPORTS + LEFT_JOIN + TABLE_REPORT_CATEGORY + ON + TABLE_REPORT_CATEGORY + STOP + REPORT_CATEGORY_ID + EQUAL + TABLE_REPORTS + STOP + REPORT_CATEGORY_ID + LEFT_JOIN + TABLE_USERS + ON + TABLE_REPORTS + STOP + REPORT_USERS_ID + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + LEFT_JOIN  + TABLE_REPORTS_SHARE + ON + TABLE_REPORTS_SHARE + STOP + REPORT_SHARE_REPORT_ID + EQUAL + TABLE_REPORTS + STOP + REPORT_ID + WHERE + TRUE;
        public final String SQL_SELECT_UPDATE_PERMISION=UPDATE +  TABLE_REPORTS +   SET +  REPORT_PERMISSION + EQUAL + QUESTION +  WHERE  + REPORT_ID + EQUAL + QUESTION;
        public final String SQL_SELECT_USER_IN_RURES=SELECT +  USERS_USER_ID + COMMA + USERS_FULLNAME +  FROM +  TABLE_USERS +  WHERE + USERS_USER_ID +  IN + OPEN + SELECT +  TABLE_REPORT_OFFICERS + STOP + USERS_USER_ID + FROM +  TABLE_REPORT_RULES +  LEFT_JOIN + TABLE_REPORT_BOSS + ON + TABLE_REPORT_RULES + STOP + REPORT_RULE_ID + EQUAL + TABLE_REPORT_BOSS + STOP + REPORT_BOSS_RULE_ID +  LEFT_JOIN + TABLE_REPORT_OFFICERS + ON +  TABLE_REPORT_RULES + STOP + REPORT_RULE_ID + EQUAL + TABLE_REPORT_OFFICERS + STOP + REPORT_OFFICERS_RULE_ID +  WHERE +  TABLE_REPORT_BOSS + STOP + REPORT_BOSS_USER_ID + EQUAL + QUESTION +  AND +  TABLE_REPORT_RULES + STOP + REPORT_RULES_ACTIVE + EQUAL + 1 +  CLOSE +  OR + TABLE_USERS + STOP + USERS_USER_ID + EQUAL + QUESTION;
}
