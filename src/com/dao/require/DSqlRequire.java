package com.dao.require;

import com.dao.report.DSqlReport;

public class DSqlRequire extends DSqlReport{
 
    public final String SQL_INSERT_RM_RULE_TRAILER = INSERT_INTO + TABLE_RM_RULE_TRAILER + FIELDS(RM_RULE_TRAILER_ALL_FIELDS, true) +  VALUES(RM_RULE_TRAILER_ALL_FIELDS.length);    
    public final String SQL_INSERT_REQUIRE_RULE_BOSS   = INSERT_INTO + TABLE_RM_RULE_BOSS + FIELDS(RM_RULE_BOSS_REQUIRE_ALL_FIELDS, true) +  VALUES(RM_RULE_BOSS_REQUIRE_ALL_FIELDS.length);    
    public final String SQL_INSERT_REQUIRE_RULE_OFFICE = INSERT_INTO + TABLE_RM_RULE_OFFICE + FIELDS(RM_RULE_OFFICE_ALL_FIELDS, true) +  VALUES(RM_RULE_OFFICE_ALL_FIELDS.length);    
    public final String SQL_UPDATE_RULE_PRIO = UPDATE + TABLE_RM_RULE_OFFICE + SET + SETS(RM_RULE_OFFICE_ALL_FIELDS) +  WHERE + RM_RULE_OFFICE_REQUIRE_RULE_ID + EQUAL + QUESTION + AND + RM_RULE_OFFICE_USER_ID + EQUAL + QUESTION;   
    public final String SQL_RM_RULE_TRAILER_UPDATE = UPDATE + TABLE_RM_RULE_TRAILER + SET + SETS(RM_RULE_TRAILER_ALL_FIELDS) + WHERE + RM_RULE_TRAILER_RULE_ID + EQUAL + QUESTION;
    public final String SQL_UPDATE_READED_RM_REPLY= UPDATE + TABLE_RM_TRAILER + SET + RM_TRAILER_READED + EQUAL + QUESTION + WHERE + RM_TRAILER_RM_ID + EQUAL + QUESTION + AND + RM_TRAILER_USERRECV_ID + EQUAL + QUESTION ;

    public final String SQL_SELECT_RM_BY_TOP=SELECT + MAX(RM_REQUIRE_ID) + FROM + TABLE_RM_REQUIRE + WHERE + RM_REQUIRE_RM_CREATOR + EQUAL + QUESTION;

    
    public final String SQL_INSERT_RM_REVIEW = INSERT_INTO + TABLE_RM_REVIEW + FIELDS(REPORT_RM_REVIEW_ALL_FIELDS, true) +  VALUES(REPORT_RM_REVIEW_ALL_FIELDS.length);    
    public final String SQL_SELECT_RM_EMP_PRI = SELECT + RM_RULE_OFFICE_USER_ID + FROM + TABLE_RM_RULE_OFFICE + WHERE + RM_RULE_OFFICE_REQUIRE_RULE_ID + EQUAL + QUESTION + AND + RM_RULE_OFFICE_PRIORITIE + EQUAL + 1 ;
    
    public final String SQL_DEPARTMENT_SELECT_ADD_WHERE_IN_RM_RULE_PRIORITIES = SELECT + TABLE_USERS + STOP + USERS_DEPARTMENT_ID +  FROM + TABLE_USERS + WHERE +  TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_USER_ID + FROM + TABLE_RM_RULE_OFFICE + LEFT_JOIN + TABLE_RM_RULE_TRAILER + ON + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_REQUIRE_RULE_ID + LEFT_JOIN + TABLE_RM_RULE_BOSS + ON + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_REQUIRE_RULE_ID + EQUAL + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + WHERE + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_USER_ID + EQUAL + QUESTION + AND + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_ACTIVE + DIFF + 0  + AND + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_PRIORITIE + EQUAL + 1 + CLOSE;

    
    public final String SQL_SELECT_REQUIRE_RULE_ALL = SELECT + TABLE_RM_RULE_TRAILER + STOP + STAR + COMMA + TABLE_RM_STATUS + STOP + RM_STATUS_NAME  +  FROM + TABLE_RM_RULE_TRAILER + INNER_JOIN + TABLE_RM_STATUS + ON + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_STATUS_ID + EQUAL + TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + WHERE + TRUE ;
    public final String SQL_SELECT_REQUIRE_RULE_ORDER_BY = ORDER_BY + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + DESC ;
    public final String SQL_SELECT_ALL_USERS_IN_REQUIRE_RULE_BOSS = SELECT + STAR +  FROM + TABLE_USERS + WHERE + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + RM_RULE_BOSS_USER_ID + FROM + TABLE_RM_RULE_BOSS + WHERE + RM_RULE_BOSS_REQUIRE_RULE_ID + EQUAL + QUESTION + CLOSE + ORDER_BY + USERS_USERNAME + DESC;
    public final String SQL_SELECT_ALL_USERS_IN_REQUIRE_RULE_OFFICER = SELECT + STAR +  FROM + TABLE_USERS + WHERE + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + RM_RULE_OFFICE_USER_ID + FROM + TABLE_RM_RULE_OFFICE + WHERE + RM_RULE_OFFICE_REQUIRE_RULE_ID + EQUAL + QUESTION + CLOSE + ORDER_BY + USERS_USERNAME + DESC;
    public final String SQL_SELECT_ALL_USERS_IN_DOC_PRIO = SELECT + STAR +  FROM + TABLE_USERS + WHERE + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + RM_RULE_OFFICE_USER_ID + FROM + TABLE_RM_RULE_OFFICE + WHERE + RM_RULE_OFFICE_REQUIRE_RULE_ID + EQUAL + QUESTION + AND  + RM_RULE_OFFICE_PRIORITIE + EQUAL + 1 + CLOSE + ORDER_BY + USERS_USERNAME + DESC;
    public final String SQL_REQUIRE_RULE_UPDATE_ACTIVE = UPDATE + TABLE_RM_RULE_TRAILER + SET + RM_RULE_TRAILER_ACTIVE + EQUAL + QUESTION + WHERE + RM_RULE_TRAILER_RULE_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_REQUIRE_RULE_BY_ID = SELECT + STAR + FROM + TABLE_RM_RULE_TRAILER +  WHERE + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + QUESTION ;


    
    public final String SQL_CAT_REQUIRE_SELECT_ALL = SELECT + STAR + FROM + TABLE_RM_CATEGORY + ORDER_BY + RM_CATEGORY_RM_CAT_ID;
    public final String SQL_CAT_REQUIRE_ADD_NEW = INSERT_INTO + TABLE_RM_CATEGORY + FIELDS(REPORT_RM_CATEGORY_ALL_FIELDS,true)+ VALUES(REPORT_RM_CATEGORY_ALL_FIELDS.length);
    public final String SQL_CAT_REQUIRE_UPDATE = UPDATE + TABLE_RM_CATEGORY + SET + SETS(REPORT_RM_CATEGORY_ALL_FIELDS)+ WHERE + RM_CATEGORY_RM_CAT_ID + EQUAL + QUESTION;
    public final String SQL_CAT_REQUIRE_BY_ID = SELECT + STAR + FROM + TABLE_RM_CATEGORY + WHERE + RM_CATEGORY_RM_CAT_ID + EQUAL + QUESTION;
    
    public final String SQL_RM_STATUS_SELECT_ALL = SELECT + STAR + FROM + TABLE_RM_STATUS + ORDER_BY + RM_STATUS_STATUS_ID;
    public final String SQL_RM_STATUS_ADD_NEW = INSERT_INTO + TABLE_RM_STATUS + FIELDS(REPORT_RM_STATUS_ALL_FIELDS,true)+ VALUES(REPORT_RM_STATUS_ALL_FIELDS.length);
    public final String SQL_RM_STATUS_UPDATE = UPDATE + TABLE_RM_STATUS + SET + SETS(REPORT_RM_STATUS_ALL_FIELDS)+ WHERE + RM_STATUS_STATUS_ID + EQUAL + QUESTION;
    public final String SQL_RM_STATUS_BY_ID = SELECT + STAR + FROM + TABLE_RM_STATUS + WHERE + RM_STATUS_STATUS_ID + EQUAL + QUESTION;

    public final String SQL_REQUIRES_ADD_NEW = INSERT_INTO + TABLE_RM_REQUIRE + FIELDS(RM_REQUIRE_ALL_FIELDS,true)+ VALUES(RM_REQUIRE_ALL_FIELDS.length);
    public final String SQL_REQUIRES_SELECT_ALL = SELECT + TABLE_RM_REQUIRE + STOP + STAR +  COMMA + TABLE_RM_TRAILER + STOP + RM_TRAILER_READED +  COMMA + TABLE_RM_STATUS + STOP + RM_STATUS_NAME + AS + "RM_STATUSNAME" + COMMA + TABLE_RM_CATEGORY + STOP + RM_CATEGORY_RM_CAT_NAME + AS + "RMCATNAME"  + COMMA + TABLE_DEPARTMENTS + STOP + DEPARTMENTS_NAME + AS + "DEPARTMENTSNAME" + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + AS + "USERSFULLNAME" + FROM + TABLE_RM_REQUIRE + LEFT_JOIN + TABLE_RM_STATUS + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_STATUS_ID + EQUAL + TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + LEFT_JOIN + TABLE_RM_CATEGORY + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_CATEGORY_ID + EQUAL + TABLE_RM_CATEGORY + STOP + RM_CATEGORY_RM_CAT_ID + LEFT_JOIN + TABLE_DEPARTMENTS + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_DEPARTMENT_ID + EQUAL + TABLE_DEPARTMENTS + STOP + DEPARTMENTS_DEPARTMENT_ID + LEFT_JOIN + TABLE_USERS + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_CREATOR + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + LEFT_JOIN + TABLE_RM_TRAILER + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_ID + EQUAL + TABLE_RM_TRAILER + STOP + RM_TRAILER_RM_ID +  WHERE + RM_TRAILER_USERRECV_ID + EQUAL + QUESTION;
    
    public final String SQL_TABLE_ALL_REQUIRE_OBSERVER=
    
    SELECT +  TABLE_USERS + STOP + USERS_FULLNAME + COMMA + TABLE_RM_REQUIRE + STOP + STAR + COMMA + TABLE_RM_STATUS + STOP + RM_STATUS_NAME + AS + "RM_STATUSNAME" + COMMA + 1 + AS +  RM_TRAILER_READED + COMMA + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_STATUS_ID + COMMA + TABLE_RM_CATEGORY + STOP + RM_CATEGORY_RM_CAT_NAME + AS + "RMCATNAME" + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + AS + "USERSFULLNAME" +  FROM +  TABLE_RM_REQUIRE + 
    LEFT_JOIN + TABLE_RM_CATEGORY + ON + TABLE_RM_CATEGORY + STOP + RM_CATEGORY_RM_CAT_ID + EQUAL + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_CATEGORY_ID + 
    LEFT_JOIN + TABLE_USERS +  ON +  TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_CREATOR + EQUAL + TABLE_USERS + STOP + USERS_USER_ID  +  
    LEFT_JOIN +  TABLE_RM_STATUS + ON +  TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + EQUAL + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_STATUS_ID;
    //LEFT_JOIN +  TABLE_RM_TRAILER + ON +  TABLE_RM_TRAILER + STOP + RM_TRAILER_RM_ID + EQUAL + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_ID ;

    
    public final String SQL_REQUIRES_WHERE = ORDER_BY + RM_REQUIRE_RM_DATECREATE + DESC;
    
    public final String SQL_REQUIRES_SELECT_BY_ID = SELECT + TABLE_RM_REQUIRE + STOP + STAR + COMMA + TABLE_RM_TRAILER + STOP + RM_TRAILER_READED + COMMA + TABLE_RM_STATUS + STOP + RM_STATUS_NAME + AS + "RM_STATUSNAME" + COMMA + TABLE_RM_CATEGORY + STOP + RM_CATEGORY_RM_CAT_NAME + AS + "RMCATNAME"  + COMMA + TABLE_DEPARTMENTS + STOP + DEPARTMENTS_NAME + AS + "DEPARTMENTSNAME" + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + AS + "USERSFULLNAME" + FROM + TABLE_RM_REQUIRE + LEFT_JOIN + TABLE_RM_STATUS + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_STATUS_ID + EQUAL + TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + LEFT_JOIN + TABLE_RM_CATEGORY + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_CATEGORY_ID + EQUAL + TABLE_RM_CATEGORY + STOP + RM_CATEGORY_RM_CAT_ID + LEFT_JOIN + TABLE_DEPARTMENTS + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_DEPARTMENT_ID + EQUAL + TABLE_DEPARTMENTS + STOP + DEPARTMENTS_DEPARTMENT_ID + LEFT_JOIN + TABLE_USERS + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_RM_CREATOR + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + LEFT_JOIN + TABLE_RM_TRAILER + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_ID + EQUAL + TABLE_RM_TRAILER + STOP + RM_TRAILER_RM_ID +  WHERE + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_REQUIRES_BY_CREATOR= AND + TABLE_RM_TRAILER + STOP + RM_TRAILER_USERRECV_ID + EQUAL + QUESTION; 

   
    public final String SQL_SELECT_ALL_USER_PRIO_RM = TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_USER_ID + FROM + TABLE_RM_RULE_TRAILER + LEFT_JOIN + TABLE_RM_RULE_OFFICE + ON + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_REQUIRE_RULE_ID + LEFT_JOIN + TABLE_RM_RULE_BOSS + ON + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_REQUIRE_RULE_ID + WHERE + TABLE_RM_RULE_TRAILER  + STOP + RM_RULE_TRAILER_ACTIVE + DIFF + 0 + AND + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_USER_ID + EQUAL + QUESTION + AND + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_PRIORITIE + EQUAL + 1 + AND + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_USER_ID +  NOT + IN + OPEN +  SELECT + RM_TRAILER_USERRECV_ID + FROM + TABLE_RM_TRAILER + WHERE +  RM_TRAILER_RM_ID + EQUAL + QUESTION + CLOSE ;
   
    public final String SQL_SELECT_ALL_USER_PRIO_ADD_BY_DEPARTMENT_ID_RM = TABLE_USERS + STOP + USERS_USER_ID + FROM + TABLE_USERS + WHERE + TABLE_USERS + STOP + USERS_DEPARTMENT_ID + EQUAL + QUESTION + AND + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + SQL_SELECT_ALL_USER_PRIO_RM + CLOSE;
    public final String SQL_INSERT_RM_TRAILER = INSERT_INTO + TABLE_RM_TRAILER + FIELDS(RM_TRAILER_ALL_FIELDS, true) +  OPEN + SELECT + QUESTION + COMMA + QUESTION + COMMA +  QUESTION + COMMA + QUESTION + COMMA + QUESTION + COMMA + "#" + CLOSE;        
    public final String SQL_UPDATE_TRAILER_READED_FOR_ME= UPDATE + TABLE_RM_TRAILER + SET + RM_TRAILER_READED + EQUAL + QUESTION + WHERE + RM_TRAILER_RM_ID + EQUAL + QUESTION + AND + RM_TRAILER_USERRECV_ID + EQUAL + QUESTION  ;
    public final String SQL_UPDATE_RM_REQUIRE = UPDATE + TABLE_RM_REQUIRE + SET + RM_REQUIRE_RM_STATUS_ID + EQUAL + QUESTION + WHERE + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_ID + EQUAL + QUESTION;
    public final String SQL_CHECK_RM_TRAILER_ADDBATCH=SELECT +  STAR +  FROM +  TABLE_RM_TRAILER +  WHERE +  RM_TRAILER_RM_ID + EQUAL + QUESTION +  AND +  RM_TRAILER_USERRECV_ID + EQUAL + QUESTION;
    public final String SQL_RM_RULE_JOIN_WHERE = SELECT + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_USER_ID + FROM + TABLE_RM_RULE_TRAILER + LEFT_JOIN + TABLE_RM_RULE_OFFICE + ON + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_REQUIRE_RULE_ID + LEFT_JOIN + TABLE_RM_RULE_BOSS + ON + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + TABLE_RM_RULE_BOSS  + STOP + RM_RULE_BOSS_REQUIRE_RULE_ID + WHERE + TABLE_RM_RULE_BOSS  + STOP + RM_RULE_BOSS_USER_ID + EQUAL + QUESTION + AND + TABLE_RM_RULE_TRAILER  + STOP + RM_RULE_TRAILER_ACTIVE + DIFF + 0  + AND + TABLE_RM_RULE_TRAILER  + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + QUESTION ;
    public final String SQL_DEPARTMENT_BY_RM_RULE = SELECT + STAR + FROM + TABLE_DEPARTMENTS + WHERE + DEPARTMENTS_DEPARTMENT_ID + IN + OPEN + SELECT + USERS_DEPARTMENT_ID + FROM + TABLE_USERS + WHERE + TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN +  SQL_RM_RULE_JOIN_WHERE + CLOSE + CLOSE;
    public final String SQL_INSERT_RM_TRAILER_EMP_SELECT = INSERT_INTO + TABLE_RM_TRAILER + FIELDS(RM_TRAILER_ALL_FIELDS, true) +  VALUES(RM_TRAILER_ALL_FIELDS.length);        
    public final String SQL_UPDATE_READED_RM_EMP_RECV=UPDATE + TABLE_RM_TRAILER + SET + RM_TRAILER_READED + EQUAL + QUESTION + WHERE + RM_TRAILER_RM_ID + EQUAL + QUESTION + AND + RM_TRAILER_USERRECV_ID + IN + OPEN + "#" + CLOSE;
    public final String SQL_SELECT_RM_EMP_PRIORITIES=SELECT +  TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_USER_ID +  FROM +  TABLE_RM_RULE_TRAILER +  LEFT_JOIN +   TABLE_RM_RULE_OFFICE +  ON +  TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_REQUIRE_RULE_ID +  LEFT_JOIN +  TABLE_RM_RULE_BOSS +  ON +  TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_REQUIRE_RULE_ID + WHERE + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_ACTIVE + DIFF + 0 + AND + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_USER_ID + EQUAL + QUESTION + AND + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_PRIORITIE + EQUAL + 1;
    public final String SQL_CHECK_RM_TRAILER_DELETE=SELECT +  STAR +  FROM +  TABLE_RM_TRAILER +  WHERE +  RM_TRAILER_RM_ID + EQUAL + QUESTION;
    
    public final String SQL_UPDATE_REQUIRE_STATUS = UPDATE + TABLE_RM_REQUIRE + SET + RM_REQUIRE_RM_STATUS_ID + EQUAL + QUESTION + WHERE + RM_REQUIRE_ID + EQUAL + QUESTION;
    public final String SQL_UPDATE_REQUIRE_TRAILER_STATUS = UPDATE + TABLE_RM_TRAILER + SET + RM_TRAILER_RMSTATUS + EQUAL + QUESTION + COMMA + RM_TRAILER_READED + EQUAL + QUESTION + WHERE + RM_TRAILER_RM_ID + EQUAL + QUESTION;



    
    public final String SQL_GROUP_SELECT_ALL_GROUP_IN_RM_RULE   =  SELECT + GROUPS_GROUP_ID + COMMA + GROUPS_NAME + COMMA + GROUPS_PARENT_ID + FROM + TABLE_GROUPS ;
    public final String SQL_GROUP_SELECT_ADD_WHERE_IN_RM_RULE = SELECT +  TABLE_USERS + STOP + USERS_GROUP_ID + FROM + TABLE_USERS + WHERE +  TABLE_USERS + STOP + USERS_USER_ID + IN + OPEN + SELECT + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_USER_ID + FROM + TABLE_RM_RULE_OFFICE + LEFT_JOIN + TABLE_RM_RULE_TRAILER + ON + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + TABLE_RM_RULE_OFFICE + STOP + RM_RULE_OFFICE_REQUIRE_RULE_ID + LEFT_JOIN + TABLE_RM_RULE_BOSS + ON + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_REQUIRE_RULE_ID + WHERE + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_USER_ID + EQUAL + QUESTION + AND + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_ACTIVE + DIFF + 0 + AND + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + QUESTION + CLOSE;
    public final String SQL_GROUP_ADD_WHERE_ID_BY_RM_RULE = WHERE + GROUPS_GROUP_ID + IN + OPEN + "#" + CLOSE;   
    
    public final String SQL_SELECT_RM_TRAILER_MOVE=SELECT +  TABLE_RM_TRAILER + STOP + STAR + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + AS + "USERSEND" + COMMA + "B.FULLNAME AS USERRECV" + COMMA + TABLE_RM_STATUS + STOP + RM_STATUS_NAME + FROM + TABLE_RM_TRAILER + LEFT_JOIN + TABLE_RM_STATUS +  ON + TABLE_RM_TRAILER + STOP + RM_TRAILER_RMSTATUS + EQUAL + TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + LEFT_JOIN  + TABLE_USERS + ON + TABLE_RM_TRAILER + STOP + RM_TRAILER_USERSEND_ID + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + LEFT_JOIN + TABLE_USERS + AS + "B" + ON +  TABLE_RM_TRAILER + STOP + RM_TRAILER_USERRECV_ID + EQUAL + "B." + USERS_USER_ID + WHERE + TABLE_RM_TRAILER + STOP + RM_TRAILER_RM_ID + EQUAL + QUESTION;
    public final String SQL_SELECT_RM_TRAILER_MOVE_BY_CRAETOR = AND  + OPEN + TABLE_RM_TRAILER + STOP + RM_TRAILER_USERSEND_ID + EQUAL + QUESTION + OR + TABLE_RM_TRAILER + STOP + RM_TRAILER_USERRECV_ID + EQUAL + QUESTION + OR + EXISTS + OPEN + SELECT + STAR + FROM + TABLE_RM_RULE_TRAILER + LEFT_JOIN + TABLE_RM_RULE_BOSS + ON + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_REQUIRE_RULE_ID  + EQUAL + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + WHERE + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_USER_ID + EQUAL + QUESTION  + CLOSE + CLOSE + ORDER_BY + TABLE_RM_TRAILER + STOP + RM_TRAILER_TIMESEND + COMMA + TABLE_RM_TRAILER + STOP + RM_TRAILER_USERSEND_ID;
    
    public final String SQL_SELECT_ALL_RM_REVIEW_PUPLIC = SELECT + TABLE_RM_REVIEW + STOP + STAR + COMMA + TABLE_USERS + STOP + USERS_FULLNAME +  FROM + TABLE_RM_REVIEW +  LEFT_JOIN +  TABLE_USERS + ON + TABLE_RM_REVIEW + STOP + RM_REVIEW_CREATOR + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + WHERE + TABLE_RM_REVIEW + STOP + RM_REVIEW_RM_ID + EQUAL + QUESTION + ORDER_BY +  TABLE_RM_REVIEW + STOP + RM_REVIEW_TIMECREATE + DESC;
    public final String SQL_SELECT_ALL_RM_REVIEW_RECV_PRIVATE = SELECT +  TABLE_RM_REVIEW + STOP + STAR + COMMA + TABLE_USERS + STOP + USERS_FULLNAME + FROM + TABLE_RM_REVIEW + LEFT_JOIN + TABLE_USERS + ON + TABLE_RM_REVIEW + STOP + RM_REVIEW_CREATOR + EQUAL + TABLE_USERS + STOP + USERS_USER_ID + WHERE + TABLE_RM_REVIEW + STOP + RM_REVIEW_RM_ID + EQUAL + QUESTION + AND + OPEN + TABLE_RM_REVIEW + STOP + RM_REVIEW_CREATOR + EQUAL + QUESTION + OR + TABLE_RM_REVIEW + STOP + RM_REVIEW_REVIEW_IDS + LIKE +  QUESTION + CLOSE + ORDER_BY + TABLE_RM_REVIEW + STOP + RM_REVIEW_TIMECREATE + DESC;
    
    
    public final String SQL_SQL_AMOUNT_RM_BY_STATUS    =SELECT +  TABLE_RM_STATUS + STOP + RM_STATUS_NAME + AS + "NAME" + COMMA + TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + AS + "STATUS_ID" + COMMA +  COUNT + OPEN + "A.RM_STATUS_ID"  + CLOSE  + AS  + "AMOUNT" + FROM +  TABLE_RM_STATUS + LEFT_JOIN +  OPEN  + SELECT + TABLE_RM_REQUIRE + STOP + STAR + FROM + TABLE_RM_REQUIRE + LEFT_JOIN + TABLE_RM_TRAILER + ON + TABLE_RM_TRAILER + STOP + RM_TRAILER_RM_ID + EQUAL + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_ID + WHERE + TABLE_RM_TRAILER + STOP + RM_TRAILER_USERRECV_ID + EQUAL + QUESTION +  AND + TABLE_RM_TRAILER + STOP + RM_TRAILER_READED + EQUAL + 1 + CLOSE + AS + "A" + ON + "A.RM_STATUS_ID" + EQUAL + TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + WHERE + TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + IN + OPEN + "#" + CLOSE + GROUP_BY +  TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + COMMA + TABLE_RM_STATUS + STOP + RM_STATUS_NAME;
    public final String SQL_SQL_AMOUNT_RM_BY_STATUS_OB_SERVER    =SELECT +  TABLE_RM_STATUS + STOP + RM_STATUS_NAME + AS + "NAME" + COMMA + TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + AS + "STATUS_ID" + COMMA +  COUNT + OPEN + "A.RM_STATUS_ID"  + CLOSE  + AS  + "AMOUNT" + FROM +  TABLE_RM_STATUS + LEFT_JOIN +  OPEN  + SELECT + TABLE_RM_REQUIRE + STOP + STAR + FROM + TABLE_RM_REQUIRE + LEFT_JOIN + TABLE_RM_TRAILER + ON + TABLE_RM_TRAILER + STOP + RM_TRAILER_RM_ID + EQUAL + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_ID + WHERE + TABLE_RM_TRAILER + STOP + RM_TRAILER_READED + EQUAL + QUESTION + CLOSE + AS + "A" + ON + "A.RM_STATUS_ID" + EQUAL + TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + WHERE + TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + IN + OPEN + "#" + CLOSE + GROUP_BY +  TABLE_RM_STATUS + STOP + RM_STATUS_STATUS_ID + COMMA + TABLE_RM_STATUS + STOP + RM_STATUS_NAME;
    public final String SQL_AMOUNT_RM_WAIT = SELECT + COUNT + OPEN +  TABLE_RM_REQUIRE + STOP + RM_REQUIRE_ID + CLOSE + FROM + TABLE_RM_REQUIRE + INNER_JOIN + TABLE_RM_TRAILER + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_ID + EQUAL + TABLE_RM_TRAILER + STOP + RM_TRAILER_RM_ID +  WHERE + RM_TRAILER_USERRECV_ID + EQUAL + QUESTION +  AND + RM_TRAILER_READED + EQUAL + 0 ;
    public final String SQL_AMOUNT_RM_ALL = SELECT + COUNT + OPEN +  TABLE_RM_REQUIRE + STOP + RM_REQUIRE_ID + CLOSE + FROM + TABLE_RM_REQUIRE + INNER_JOIN + TABLE_RM_TRAILER + ON + TABLE_RM_REQUIRE + STOP + RM_REQUIRE_ID + EQUAL + TABLE_RM_TRAILER + STOP + RM_TRAILER_RM_ID +  WHERE + RM_TRAILER_USERRECV_ID + EQUAL + QUESTION ;
    
    public final String SQL_INSERT_RM_OBSERVER = INSERT_INTO + TABLE_RM_OBSERVER + FIELDS(RM_OBSERVER_ALL_FIELDS, true) +  OPEN + SELECT + QUESTION + COMMA + QUESTION + COMMA + USERS_FULLNAME + FROM + TABLE_USERS + WHERE + USERS_USER_ID + EQUAL + QUESTION + CLOSE;    
    public final String SQL_SELECT_RM_OBSERVER_ALL = SELECT +  STAR +  FROM + TABLE_RM_OBSERVER + ORDER_BY + RM_OBSERVER_FULLNAME;
    public final String SQL_SELECT_ALL_RM_CHECK_OBSERVER = SELECT + STAR + FROM + TABLE_RM_OBSERVER + WHERE + RM_OBSERVER_USER_ID + EQUAL + QUESTION;        











    

    



    

}
