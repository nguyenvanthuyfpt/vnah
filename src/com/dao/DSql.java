package com.dao;

import com.dao.template.DSqlTemplate;

public class DSql extends DSqlTemplate{
    
    public final String SQL_SELECT_REQUIRES_CHECK_RULES = SELECT + TABLE_RM_RULE_TRAILER + STOP + STAR + FROM + TABLE_RM_RULE_BOSS + LEFT_JOIN + TABLE_RM_RULE_TRAILER + ON + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_RULE_ID + EQUAL + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_REQUIRE_RULE_ID + WHERE + TABLE_RM_RULE_TRAILER + STOP + RM_RULE_TRAILER_ACTIVE + DIFF + 0 + AND + TABLE_RM_RULE_BOSS + STOP + RM_RULE_BOSS_USER_ID + EQUAL + QUESTION;    

    
    public final String SQL_WHERE_=AND + OPEN + TABLE_DOCSSEND + STOP + DOCSSEND_DOCCODE + EQUAL + "'"+"'" +  OR +  TABLE_DOCSSEND + STOP + DOCSSEND_DOCCODE +  IS +  NULL + CLOSE;
    public final String SQL_WHERE_DOCSSEND=AND + OPEN + TABLE_DOCSSEND + STOP + DOCSSEND_DOCCODE +IS + NOT + NULL +  AND +  TABLE_DOCSSEND + STOP + DOCSSEND_DOCCODE +  DIFF + "''" + CLOSE;
    
    public final String SQL_TABLE_AMOUNT_BY_READ = "READED" + COMMA + COUNT + OPEN + "READED" + CLOSE + AS + "AMOUNT" ;   
    
    public final String SQL_TABLE_AMOUNT_DOCSSEND = SELECT + "@" + FROM + OPEN +  
     " (SELECT DOCS_SEND.DOC_ID,DOC_TRAILER_SEND.READED  " +         
        "FROM DOCS_SEND  " + 
        "LEFT JOIN DOC_TRAILER_SEND ON DOC_TRAILER_SEND.DOC_ID=DOCS_SEND.DOC_ID  " + 
        "LEFT JOIN USERS ON DOC_TRAILER_SEND.USERSEND_ID=USERS.USER_ID  " + 
        "LEFT JOIN STATUS ON STATUS.STATUS_ID=DOCS_SEND.STATUS_ID  " + 
        "WHERE  DOC_TRAILER_SEND.USERRECV_ID=?  #)) DOCSSEND ";
        
    public final String SQL_TABLE_ALL_AMOUNT_DOCSRECV_READ = SELECT + "#" + FROM + OPEN + 
     "(SELECT DOCS_RECV.DOC_ID,DOC_TRAILER_RECV.READED  " +         
        "FROM DOCS_RECV  " + 
        "LEFT JOIN DOC_TRAILER_RECV ON DOC_TRAILER_RECV.DOC_ID=DOCS_RECV.DOC_ID  " + 
        "LEFT JOIN USERS ON DOC_TRAILER_RECV.USERSEND_ID=USERS.USER_ID  " + 
        "LEFT JOIN STATUS ON STATUS.STATUS_ID=DOCS_RECV.STATUS_ID  " + 
        "WHERE DOC_TRAILER_RECV.USERRECV_ID=? AND DOC_TRAILER_RECV.READED=? )) DOCSRECV ";
        
    public final String SQL_TABLE_ALL_AMOUNT_DOCSRECV_READ_OBSERVER = SELECT + "#" + FROM + OPEN + 
     "(SELECT DOCS_RECV.DOC_ID,DOC_TRAILER_RECV.READED  " +         
        "FROM DOCS_RECV  " + 
        "LEFT JOIN DOC_TRAILER_RECV ON DOC_TRAILER_RECV.DOC_ID=DOCS_RECV.DOC_ID  " + 
        "LEFT JOIN USERS ON DOC_TRAILER_RECV.USERSEND_ID=USERS.USER_ID  " + 
        "LEFT JOIN STATUS ON STATUS.STATUS_ID=DOCS_RECV.STATUS_ID  " + 
        "WHERE  1=1 )) DOCSRECV ";
    
    public final String SQL_TABLE_ALL_AMOUNT_DOCSRECV = SELECT + "#" + FROM + OPEN + 
    
    "(SELECT DOCS_RECV.DOC_ID,DOC_TRAILER_RECV.READED  " +         
        "FROM DOCS_RECV  " + 
        "LEFT JOIN DOC_TRAILER_RECV ON DOC_TRAILER_RECV.DOC_ID=DOCS_RECV.DOC_ID  " + 
        "LEFT JOIN USERS ON DOC_TRAILER_RECV.USERSEND_ID=USERS.USER_ID  " + 
        "LEFT JOIN STATUS ON STATUS.STATUS_ID=DOCS_RECV.STATUS_ID  " + 
        "WHERE DOC_TRAILER_RECV.USERRECV_ID=? )) DOCSRECV ";
   
    public final String SQL_WHERE_DOCSSEND_RESULT = SQL_TABLE_AMOUNT_DOCSSEND.replaceAll("#",SQL_WHERE_DOCSSEND);
    public final String SQL_WHERE_DOCSSEND_WHERE = SQL_TABLE_AMOUNT_DOCSSEND.replaceAll("#",SQL_WHERE_);
    
    public final String SQL_WHERE_DOCSSEND_RESULT_DT = SQL_TABLE_AMOUNT_DOCSSEND.replaceAll("#",SQL_WHERE_DOCSSEND);
    
    public final String SQL_MENUE_SELECT_ALL_MENUE  =  SELECT + TABLE_MENU + STOP + STAR + FROM + TABLE_MENU + LEFT_JOIN + TABLE_UPERMISION + ON + TABLE_MENU + STOP + MENU_ID + EQUAL + TABLE_UPERMISION + STOP + UPERMISION_MENU_ID + WHERE + TABLE_MENU + STOP + MENU_ACTIVE + EQUAL + PARAM_01 + AND + TABLE_UPERMISION + STOP + UPERMISION_USER_ID + EQUAL + QUESTION + ORDER_BY + TABLE_MENU + STOP + MENU_ID;
    public final String SQL_SELECT_PORTALET_CLOSE="SELECT UPERMISION.MENU_ID,MENU.TITLE FROM UPERMISION LEFT JOIN MENU ON UPERMISION.MENU_ID=MENU.MENU_ID WHERE UPERMISION.USER_ID=? AND UPERMISION.MINIMIZE=? AND UPERMISION.ACTIVE=?";
    public final String SQL_SELECT_DOC_CHECK_RULES = SELECT + TABLE_DOC_RULES + STOP + DOC_RULES_STATUSES + FROM + TABLE_DOC_BOSS + LEFT_JOIN + TABLE_DOC_RULES + ON + TABLE_DOC_RULES + STOP + DOC_RULES_RULE_ID + EQUAL + TABLE_DOC_BOSS + STOP + DOC_BOSS_RULE_ID + WHERE + TABLE_DOC_RULES + STOP + DOC_RULES_ACTIVE + DIFF + 0 + AND + TABLE_DOC_RULES + STOP + DOC_RULES_WORKFLOW_ID + EQUAL + QUESTION + AND + TABLE_DOC_BOSS + STOP + DOC_BOSS_USER_ID + EQUAL + QUESTION;    
    public final String SQL_SQL_AMOUNT_RECV_BY_STATUS    =" SELECT STATUS.NAME AS NAME,STATUS.STATUS_ID AS STATUS_ID, COUNT(A.STATUS_ID)  AS AMOUNT FROM STATUS LEFT JOIN (SELECT DOCS_RECV.* FROM DOCS_RECV LEFT JOIN DOC_TRAILER_RECV ON DOC_TRAILER_RECV.DOC_ID=DOCS_RECV.DOC_ID WHERE DOC_TRAILER_RECV.USERRECV_ID=? AND DOC_TRAILER_RECV.VIEWS=0 AND DOC_TRAILER_RECV.BLOCK=0 AND DOC_TRAILER_RECV.READED = 1) A ON A.STATUS_ID=STATUS.STATUS_ID WHERE STATUS.STATUS_ID IN (#) GROUP BY STATUS.STATUS_ID,STATUS.NAME";
    public final String SQL_SQL_AMOUNT_RECV_BY_STATUS_NOT    = SELECT + TABLE_STATUS + STOP + STATUS_NAME + COMMA + TABLE_STATUS + STOP + STATUS_ID + AS + "STATUS_ID" + COMMA + 0 + AS + "AMOUNT" + FROM + TABLE_STATUS +  WHERE + STATUS_ID + IN + OPEN + QUESTION + CLOSE ;
    public final String SQL_SQL_AMOUNT_RECV_BY_STATUS_OBSERVER="SELECT STATUS.NAME AS NAME,STATUS.STATUS_ID AS STATUS_ID,STATUS.DESCRIPTION,COUNT(*) AS AMOUNT FROM DOCS_RECV LEFT JOIN STATUS ON DOCS_RECV.STATUS_ID=STATUS.STATUS_ID GROUP BY STATUS.STATUS_ID,STATUS.NAME,STATUS.DESCRIPTION";
    public final String SQL_SQL_AMOUNT_RECV_BY_READED         ="SELECT  COUNT(DOC_TRAILER_RECV.READED)FROM DOCS_RECV LEFT JOIN DOC_TRAILER_RECV ON DOC_TRAILER_RECV.DOC_ID=DOCS_RECV.DOC_ID WHERE DOC_TRAILER_RECV.BLOCK =0 AND  DOC_TRAILER_RECV.USERRECV_ID=? ";
    public final String SQL_SQL_AMOUNT_ALL_RECV        = SELECT + COUNT + OPEN + STAR + CLOSE + AS + "AMOUNT" + FROM + TABLE_DOCSRECV + LEFT_JOIN + TABLE_DOC_TRAILER_RECV + ON + TABLE_DOC_TRAILER_RECV + STOP +  DOC_TRAILER_RECV_DOC_ID + EQUAL + TABLE_DOCSRECV + STOP + DOCSRECV_DOC_ID + WHERE + TABLE_DOC_TRAILER_RECV + STOP + DOC_TRAILER_RECV_BLOCK + EQUAL + 0 + AND + TABLE_DOC_TRAILER_RECV + STOP + DOC_TRAILER_RECV_USERRECV_ID + EQUAL + QUESTION ;
    
    public final String SQL_SQL_AMOUNT_ALL_RECV_ADD_WHERE = AND  + TABLE_DOCSRECV + STOP + DOCSRECV_STATUS_ID + NOT + IN + OPEN  + "#" + CLOSE;
    public final String SQL_SQL_AMOUNT_ALL_RECV_ADD_ALL_WHERE = AND + OPEN + TABLE_DOCSRECV + STOP + DOCSRECV_STATUS_ID + NOT + IN + OPEN  + "#" + CLOSE + OR + DOC_TRAILER_RECV_VIEWS + DIFF + 0 + CLOSE;
    public final String SQL_SQL_AMOUNT_ALL_RECV_OBSERVER        = SELECT + COUNT + OPEN + STAR + CLOSE + AS + "AMOUNT" + FROM + TABLE_DOCSRECV ;
    public final String SQL_SQL_AMOUNT_RECV_BY_READED_OBSERVER="SELECT COUNT(DOC_ID) AS AMOUNT FROM DOCS_RECV";
    public final String SQL_SQL_AMOUNT_SEND_BY_READED_OBSERVER="SELECT COUNT(DOC_ID) AS AMOUNT FROM DOCS_SEND ";
    public final String SQL_SQL_AMOUNT_SEND_BY_STATUS              =" SELECT STATUS.NAME AS NAME,STATUS.STATUS_ID AS STATUS_ID, COUNT(A.STATUS_ID)  AS AMOUNT FROM STATUS LEFT JOIN (SELECT DOCS_SEND.* FROM DOCS_SEND LEFT JOIN DOC_TRAILER_SEND ON DOC_TRAILER_SEND.DOC_ID=DOCS_SEND.DOC_ID WHERE USERRECV_ID=? AND VIEWS=0 AND READED=1) A ON A.STATUS_ID=STATUS.STATUS_ID WHERE 1=1 AND STATUS.STATUS_ID IN (#) GROUP BY STATUS.STATUS_ID,STATUS.NAME ";
    public final String SQL_SQL_AMOUNT_SEND_BY_STATUS_OBSERVER     ="SELECT STATUS.NAME AS NAME,STATUS.STATUS_ID AS STATUS_ID,STATUS.DESCRIPTION,COUNT(*) AS AMOUNT FROM DOCS_SEND LEFT JOIN STATUS ON DOCS_SEND.STATUS_ID=STATUS.STATUS_ID WHERE STATUS.STATUS_ID is not null GROUP BY STATUS.STATUS_ID,STATUS.NAME,STATUS.DESCRIPTION ";
    //"SELECT STATUS.NAME,DOCS_SEND.STATUS_ID AS STATUS_ID, COUNT(DOCS_SEND.STATUS_ID)  AS AMOUNT FROM DOCS_SEND LEFT JOIN STATUS ON DOCS_SEND.STATUS_ID=STATUS.STATUS_ID WHERE STATUS.GROUPS<>0 AND DOCS_SEND.DOC_ID IN ( SELECT DOCS_SEND.DOC_ID  FROM DOCS_SEND  LEFT JOIN DOC_TRAILER_SEND ON DOC_TRAILER_SEND.DOC_ID=DOCS_SEND.DOC_ID    )  GROUP BY DOCS_SEND.STATUS_ID,STATUS.NAME";
    public final String SQL_SQL_AMOUNT_SEND_BY_READED  =  "SELECT COUNT(READED)  AS AMOUNT FROM ( (SELECT DOCS_SEND.DOC_ID,DOC_TRAILER_SEND.READED  FROM DOCS_SEND  LEFT JOIN DOC_TRAILER_SEND ON DOC_TRAILER_SEND.DOC_ID=DOCS_SEND.DOC_ID WHERE DOC_TRAILER_SEND.BLOCK=0 AND  DOC_TRAILER_SEND.USERRECV_ID=?  # DOCSSEND  GROUP BY READED";
    public final String SQL_SQL_AMOUNT_AAL_SEND_BY_READED  =  "SELECT COUNT(READED)  AS AMOUNT FROM ( (SELECT DOCS_SEND.DOC_ID,DOC_TRAILER_SEND.READED  FROM DOCS_SEND  LEFT JOIN DOC_TRAILER_SEND ON DOC_TRAILER_SEND.DOC_ID=DOCS_SEND.DOC_ID WHERE DOC_TRAILER_SEND.BLOCK=0 AND  DOC_TRAILER_SEND.USERRECV_ID=?  # DOCSSEND  ";

    
    public final String SQL_AMOUNT_ALL_SEND  =  "SELECT COUNT(READED)  AS AMOUNT FROM ( (SELECT DOCS_SEND.DOC_ID,DOC_TRAILER_SEND.READED  FROM DOCS_SEND  LEFT JOIN DOC_TRAILER_SEND ON DOC_TRAILER_SEND.DOC_ID=DOCS_SEND.DOC_ID WHERE DOC_TRAILER_SEND.BLOCK=0 AND  DOC_TRAILER_SEND.USERRECV_ID=?  # DOCSSEND  ";

    
    public final String SQL_SQL_AMOUNT_SEND_BY_READED_WHERE = " AND DOCS_SEND.STATUS_ID NOT IN ( # ) )) ";
    
    public final String SQL_SQL_AMOUNT_SEND_DT_BY_STATUS           ="SELECT STATUS.NAME,DOCS_SEND.STATUS_ID , COUNT(DOCS_SEND.STATUS_ID)  AS AMOUNT FROM DOCS_SEND LEFT JOIN STATUS ON DOCS_SEND.STATUS_ID=STATUS.STATUS_ID WHERE STATUS.GROUPS<>0 AND DOCS_SEND.DOC_ID IN ( SELECT DOCS_SEND.DOC_ID FROM DOCS_SEND  LEFT JOIN DOC_TRAILER_SEND ON DOC_TRAILER_SEND.DOC_ID=DOCS_SEND.DOC_ID  WHERE DOC_TRAILER_SEND.BLOCK=0 AND  DOC_TRAILER_SEND.USERRECV_ID=? AND DOC_TRAILER_SEND.READED=? AND (DOCS_SEND.DOCCODE='' OR DOCS_SEND.DOCCODE IS  NULL))  GROUP BY DOCS_SEND.STATUS_ID,STATUS.NAME";
    public final String SQL_SQL_AMOUNT_SEND_DT_BY_STATUS_OBSERVER  ="SELECT STATUS.NAME,DOCS_SEND.STATUS_ID AS STATUS_ID,STATUS.DESCRIPTION, COUNT(DOCS_SEND.STATUS_ID)  AS AMOUNT FROM DOCS_SEND LEFT JOIN STATUS ON DOCS_SEND.STATUS_ID=STATUS.STATUS_ID WHERE STATUS.GROUPS<>0 AND DOCS_SEND.DOC_ID IN ( SELECT DOCS_SEND.DOC_ID  FROM DOCS_SEND  LEFT JOIN DOC_TRAILER_SEND ON DOC_TRAILER_SEND.DOC_ID=DOCS_SEND.DOC_ID  WHERE (DOCS_SEND.DOCCODE='' OR DOCS_SEND.DOCCODE IS  NULL)  and  STATUS.STATUS_ID is not null )  GROUP BY DOCS_SEND.STATUS_ID,STATUS.NAME,STATUS.DESCRIPTION";
    public final String SQL_SQL_AMOUNT_SEND_DT_BY_READ_OBSERVER  ="SELECT 1 AS READED,COUNT(DOC_ID) AS AMOUNT FROM DOCS_SEND WHERE DOCS_SEND.DOCCODE IS NULL  OR DOCS_SEND.DOCCODE=''";
        
    public final String SQL_SQL_AMOUNT_SEND_DT_BY_OBSERVER  ="SELECT COUNT(DOC_ID) AS AMOUNT FROM DOCS_SEND WHERE DOCS_SEND.DOCCODE IS NULL  OR DOCS_SEND.DOCCODE=''";

    public final String SQL_SQL_AMOUNT_SEND_DT_BY_READ  =  "SELECT READED, COUNT(READED)  AS AMOUNT FROM ( (SELECT DOCS_SEND.DOC_ID,DOC_TRAILER_SEND.READED  FROM DOCS_SEND  LEFT JOIN DOC_TRAILER_SEND ON DOC_TRAILER_SEND.DOC_ID=DOCS_SEND.DOC_ID  LEFT JOIN USERS ON DOC_TRAILER_SEND.USERSEND_ID=USERS.USER_ID  LEFT JOIN STATUS ON STATUS.STATUS_ID=DOCS_SEND.STATUS_ID  WHERE DOC_TRAILER_SEND.BLOCK=0 AND  DOC_TRAILER_SEND.USERRECV_ID=? AND  DOC_TRAILER_SEND.VIEWS=0 AND (DOCS_SEND.DOCCODE='' OR DOCS_SEND.DOCCODE IS  NULL ) )) DOCSSEND  GROUP BY READED";
        
    public final String SQL_SQL_AMOUNT_ALL_SEND_DT  =  "SELECT COUNT(DOCS_SEND.DOC_ID)  FROM DOCS_SEND  LEFT JOIN DOC_TRAILER_SEND ON DOC_TRAILER_SEND.DOC_ID=DOCS_SEND.DOC_ID  LEFT JOIN USERS ON DOC_TRAILER_SEND.USERSEND_ID=USERS.USER_ID  LEFT JOIN STATUS ON STATUS.STATUS_ID=DOCS_SEND.STATUS_ID  WHERE DOC_TRAILER_SEND.BLOCK=0 AND  DOC_TRAILER_SEND.USERRECV_ID=? AND  DOC_TRAILER_SEND.VIEWS=0 AND (DOCS_SEND.DOCCODE='' OR DOCS_SEND.DOCCODE IS  NULL )";

        
        public final String SQL_SQL_AMOUNT_SEND_WAIT_AND_NOTINCHANGE="SELECT A.ID,A.NAME,B.TOTAL FROM TRANSFER AS A LEFT JOIN (SELECT COUNT(DOC_TRAILER_SEND.VIEWS) AS TOTAL,VIEWS FROM DOCS_SEND LEFT JOIN DOC_TRAILER_SEND ON DOC_TRAILER_SEND.DOC_ID=DOCS_SEND.DOC_ID where BLOCK=0 AND USERRECV_ID=? AND READED=0 GROUP BY VIEWS ) AS B ON A.ID=B.VIEWS ORDER BY A.ID";
        public final String SQL_SQL_AMOUNT_RECV_WAIT_AND_NOTINCHANGE="SELECT A.ID,A.NAME,B.TOTAL FROM TRANSFER AS A LEFT JOIN (SELECT COUNT(*) AS TOTAL,VIEWS FROM DOC_TRAILER_RECV where BLOCK=0 AND USERRECV_ID=? AND READED=0 GROUP BY VIEWS ) AS B ON A.ID=B.VIEWS ORDER BY A.ID";
    //public final String SQL_COUNT_BY_CLASSIFY_ID_DOCS_RECV="SELECT CLASSIFY.CLASSIFY_ID,CLASSIFY.NAME,COUNT(CLASSIFY.CLASSIFY_ID)  FROM DOCS_RECV LEFT JOIN  DOC_TRAILER_RECV ON DOC_TRAILER_RECV.DOC_ID=DOCS_RECV.DOC_ID LEFT JOIN  CLASSIFY ON CLASSIFY.CLASSIFY_ID=DOCS_RECV.CLASSIFY_ID WHERE CLASSIFY.CLASSIFY_ID<>0 AND DOC_TRAILER_RECV.USERRECV_ID=? AND DOC_TRAILER_RECV.READED=1 AND DOC_TRAILER_RECV.VIEWS=0 GROUP BY CLASSIFY.CLASSIFY_ID,CLASSIFY.NAME";
      public final String SQL_SERVEY_CHECK_CODE_UPDATE = SELECT + SERVEY_ID +  FROM +  TABLE_SERVEY +  WHERE +  SERVEY_ID +  IN + OPEN + SELECT +  SERVEY_ID + FROM + TABLE_SERVEY + WHERE +  SERVEY_ID + DIFF + QUESTION + CLOSE +  AND +  SERVEY_CODE + EQUAL + QUESTION;
      public final String SQL_SERVEY_CHECK_CODE_INSERT = SELECT + SERVEY_ID +  FROM +  TABLE_SERVEY + WHERE +  SERVEY_CODE + EQUAL + QUESTION;
      public final String SQL_SERVEY_SELECT_ALL = SELECT + STAR + FROM + TABLE_SERVEY + ORDER_BY + SERVEY_ORDERS + DESC;
      public final String SQL_SERVEY_SELECT_BY_ID=SELECT + STAR +FROM + TABLE_SERVEY + WHERE + SERVEY_ID + EQUAL + QUESTION;
      public final String SQL_SERVEY_INSERT= INSERT_INTO + TABLE_SERVEY + FIELDS(SERVEY_ALL_FIELDS,true) + VALUES(SERVEY_ALL_FIELDS.length);
      public final String SQL_SERVEY_UPDATE = UPDATE + TABLE_SERVEY + SET + SETS(SERVEY_ALL_FIELDS) + WHERE + SERVEY_ID + EQUAL + QUESTION;
      public final String SQL_SERVEY_BY_ACTIVE_1=SELECT + STAR + FROM + TABLE_SERVEY + WHERE + SERVEY_ACTIVE + EQUAL + QUESTION + AND + OPEN + SERVEY_TO_DATE + ">=" + QUESTION + OR + SERVEY_TO_DATE + IS_NULL + CLOSE + ORDER_BY + SERVEY_ORDERS;
      public final String SQL_QUESTIONS_CHECK_QUESTION_AND_USERID=SELECT + STAR + FROM + TABLE_SERVEY_CHOSE + WHERE + CHOSE_QUESTION_ID + EQUAL + QUESTION + AND + CHOSE_USER_ID + EQUAL + QUESTION ;    
      public final String SQL_QUESTIONS_SELECT_ALL = SELECT + STAR + FROM + TABLE_SERVEY_QUESTIONS + ORDER_BY + QUESTIONS_ORDERS;
      public final String SQL_QUESTIONS_SELECT_BY_ID=SELECT + STAR +FROM + TABLE_SERVEY_QUESTIONS + WHERE + QUESTIONS_ID + EQUAL + QUESTION;
      public final String SQL_QUESTIONS_INSERT= INSERT_INTO + TABLE_SERVEY_QUESTIONS + FIELDS(QUESTIONS_ALL_FIELDS,true) + VALUES(QUESTIONS_ALL_FIELDS.length);
      public final String SQL_QUESTIONS_UPDATE = UPDATE + TABLE_SERVEY_QUESTIONS + SET + SETS(QUESTIONS_ALL_FIELDS_UPDATE) + WHERE + QUESTIONS_ID + EQUAL + QUESTION;
      public final String SQL_QUESTIONS_SELECT_BY_SERVEY_ID="SELECT SERVEY_QUESTIONS.*,(SELECT SUM(SERVEY_QUESTIONS.COUNT) FROM SERVEY_QUESTIONS WHERE  SERVEY_ID=?) AS TOTALS FROM SERVEY_QUESTIONS WHERE SERVEY_ID=?" + ORDER_BY + QUESTIONS_ORDERS;
      public final String SQL_QUESTIONS_UPDATE_COUNT="UPDATE SERVEY_QUESTIONS SET COUNT=COUNT+1 WHERE QUESTION_ID=?"; 
    public final String SQL_SERVEY_CHOSE_INSERT= INSERT_INTO + TABLE_SERVEY_CHOSE + FIELDS(SERVEY_CHOSE_ALL_FIELDS,true) + VALUES(SERVEY_CHOSE_ALL_FIELDS.length);
    
    //
    public final String SQL_THEME_SELECT_ALL = SELECT + STAR + FROM + TABLE_THEME + ORDER_BY + THEME_ID;
    public final String SQL_THEME_ADD_NEW = INSERT_INTO + TABLE_THEME + FIELDS(THEME_ALL_FIELDS,true)+ VALUES(THEME_ALL_FIELDS.length);
    public final String SQL_THEME_UPDATE = UPDATE + TABLE_THEME + SET + SETS(THEME_ALL_FIELDS)+ WHERE + THEME_ID + EQUAL + QUESTION;
    public final String SQL_THEME_BY_ID = SELECT + STAR + FROM + TABLE_THEME + WHERE + THEME_ID + EQUAL + QUESTION;
    
    
    public final String SQP_THEME_TOP_ACTIVE=SELECT + STAR + FROM + TABLE_THEME + WHERE + THEME_ACTIVE + EQUAL + QUESTION;
    
    
}
